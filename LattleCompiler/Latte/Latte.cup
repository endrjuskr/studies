// -*- Java -*- This Cup file was machine-generated by BNFC
package Latte;

parser code {:
  public Latte.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (Latte.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal Latte.Absyn.Program Program;
nonterminal Latte.Absyn.TopDef TopDef;
nonterminal Latte.Absyn.ListTopDef ListTopDef;
nonterminal Latte.Absyn.Arg Arg;
nonterminal Latte.Absyn.ListArg ListArg;
nonterminal Latte.Absyn.Block Block;
nonterminal Latte.Absyn.ListStmt ListStmt;
nonterminal Latte.Absyn.Stmt Stmt;
nonterminal Latte.Absyn.Item Item;
nonterminal Latte.Absyn.ListItem ListItem;
nonterminal Latte.Absyn.Type Type;
nonterminal Latte.Absyn.ListType ListType;
nonterminal Latte.Absyn.Expr Expr6;
nonterminal Latte.Absyn.Expr Expr5;
nonterminal Latte.Absyn.Expr Expr4;
nonterminal Latte.Absyn.Expr Expr3;
nonterminal Latte.Absyn.Expr Expr2;
nonterminal Latte.Absyn.Expr Expr1;
nonterminal Latte.Absyn.Expr Expr;
nonterminal Latte.Absyn.ListExpr ListExpr;
nonterminal Latte.Absyn.AddOp AddOp;
nonterminal Latte.Absyn.MulOp MulOp;
nonterminal Latte.Absyn.RelOp RelOp;

terminal _SYMB_0;    //   (
terminal _SYMB_1;    //   )
terminal _SYMB_2;    //   ,
terminal _SYMB_3;    //   {
terminal _SYMB_4;    //   }
terminal _SYMB_5;    //   ;
terminal _SYMB_6;    //   =
terminal _SYMB_7;    //   ++
terminal _SYMB_8;    //   --
terminal _SYMB_9;    //   -
terminal _SYMB_10;    //   !
terminal _SYMB_11;    //   &&
terminal _SYMB_12;    //   ||
terminal _SYMB_13;    //   +
terminal _SYMB_14;    //   *
terminal _SYMB_15;    //   /
terminal _SYMB_16;    //   %
terminal _SYMB_17;    //   <
terminal _SYMB_18;    //   <=
terminal _SYMB_19;    //   >
terminal _SYMB_20;    //   >=
terminal _SYMB_21;    //   ==
terminal _SYMB_22;    //   !=
terminal _SYMB_23;    //   boolean
terminal _SYMB_24;    //   else
terminal _SYMB_25;    //   false
terminal _SYMB_26;    //   if
terminal _SYMB_27;    //   int
terminal _SYMB_28;    //   return
terminal _SYMB_29;    //   string
terminal _SYMB_30;    //   true
terminal _SYMB_31;    //   void
terminal _SYMB_32;    //   while

terminal String _STRING_;

terminal Integer _INTEGER_;

terminal String _IDENT_;



start with Program;


Program ::= ListTopDef:p_1  {: RESULT = new Latte.Absyn.ProgramNode(p_1); :} 
;
TopDef ::= Type:p_1 _IDENT_:p_2 _SYMB_0 ListArg:p_4 _SYMB_1 Block:p_6  {: RESULT = new Latte.Absyn.FnDef(p_1,p_2,p_4,p_6); :} 
;
ListTopDef ::= TopDef:p_1  {: RESULT = new Latte.Absyn.ListTopDef(); RESULT.addLast(p_1); :} 
  | TopDef:p_1 ListTopDef:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
Arg ::= Type:p_1 _IDENT_:p_2  {: RESULT = new Latte.Absyn.ArgNode(p_1,p_2); :} 
;
ListArg ::=  /* empty */  {: RESULT = new Latte.Absyn.ListArg(); :} 
  | Arg:p_1  {: RESULT = new Latte.Absyn.ListArg(); RESULT.addLast(p_1); :}
  | Arg:p_1 _SYMB_2 ListArg:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Block ::= _SYMB_3 ListStmt:p_2 _SYMB_4  {: RESULT = new Latte.Absyn.BlockNode(p_2); :} 
;
ListStmt ::=  /* empty */  {: RESULT = new Latte.Absyn.ListStmt(); :} 
  | ListStmt:p_1 Stmt:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Stmt ::= _SYMB_5  {: RESULT = new Latte.Absyn.Empty(); :} 
  | Block:p_1  {: RESULT = new Latte.Absyn.BStmt(p_1); :}
  | Type:p_1 ListItem:p_2 _SYMB_5  {: RESULT = new Latte.Absyn.Decl(p_1,p_2); :}
  | _IDENT_:p_1 _SYMB_6 Expr:p_3 _SYMB_5  {: RESULT = new Latte.Absyn.Ass(p_1,p_3); :}
  | _IDENT_:p_1 _SYMB_7 _SYMB_5  {: RESULT = new Latte.Absyn.Incr(p_1); :}
  | _IDENT_:p_1 _SYMB_8 _SYMB_5  {: RESULT = new Latte.Absyn.Decr(p_1); :}
  | _SYMB_28 Expr:p_2 _SYMB_5  {: RESULT = new Latte.Absyn.Ret(p_2); :}
  | _SYMB_28 _SYMB_5  {: RESULT = new Latte.Absyn.VRet(); :}
  | _SYMB_26 _SYMB_0 Expr:p_3 _SYMB_1 Stmt:p_5  {: RESULT = new Latte.Absyn.Cond(p_3,p_5); :}
  | _SYMB_26 _SYMB_0 Expr:p_3 _SYMB_1 Stmt:p_5 _SYMB_24 Stmt:p_7  {: RESULT = new Latte.Absyn.CondElse(p_3,p_5,p_7); :}
  | _SYMB_32 _SYMB_0 Expr:p_3 _SYMB_1 Stmt:p_5  {: RESULT = new Latte.Absyn.While(p_3,p_5); :}
  | Expr:p_1 _SYMB_5  {: RESULT = new Latte.Absyn.SExp(p_1); :}
;
Item ::= _IDENT_:p_1  {: RESULT = new Latte.Absyn.NoInit(p_1); :} 
  | _IDENT_:p_1 _SYMB_6 Expr:p_3  {: RESULT = new Latte.Absyn.Init(p_1,p_3); :}
;
ListItem ::= Item:p_1  {: RESULT = new Latte.Absyn.ListItem(); RESULT.addLast(p_1); :} 
  | Item:p_1 _SYMB_2 ListItem:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Type ::= _SYMB_27  {: RESULT = new Latte.Absyn.Int(); :} 
  | _SYMB_29  {: RESULT = new Latte.Absyn.Str(); :}
  | _SYMB_23  {: RESULT = new Latte.Absyn.Bool(); :}
  | _SYMB_31  {: RESULT = new Latte.Absyn.Void(); :}
;
ListType ::=  /* empty */  {: RESULT = new Latte.Absyn.ListType(); :} 
  | Type:p_1  {: RESULT = new Latte.Absyn.ListType(); RESULT.addLast(p_1); :}
  | Type:p_1 _SYMB_2 ListType:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Expr6 ::= _IDENT_:p_1  {: RESULT = new Latte.Absyn.EVar(p_1); :} 
  | _INTEGER_:p_1  {: RESULT = new Latte.Absyn.ELitInt(p_1); :}
  | _SYMB_30  {: RESULT = new Latte.Absyn.ELitTrue(); :}
  | _SYMB_25  {: RESULT = new Latte.Absyn.ELitFalse(); :}
  | _IDENT_:p_1 _SYMB_0 ListExpr:p_3 _SYMB_1  {: RESULT = new Latte.Absyn.EApp(p_1,p_3); :}
  | _STRING_:p_1  {: RESULT = new Latte.Absyn.EString(p_1); :}
  | _SYMB_0 Expr:p_2 _SYMB_1  {: RESULT = p_2; :}
;
Expr5 ::= _SYMB_9 Expr6:p_2  {: RESULT = new Latte.Absyn.Neg(p_2); :} 
  | _SYMB_10 Expr6:p_2  {: RESULT = new Latte.Absyn.Not(p_2); :}
  | Expr6:p_1  {: RESULT = p_1; :}
;
Expr4 ::= Expr4:p_1 MulOp:p_2 Expr5:p_3  {: RESULT = new Latte.Absyn.EMul(p_1,p_2,p_3); :} 
  | Expr5:p_1  {: RESULT = p_1; :}
;
Expr3 ::= Expr3:p_1 AddOp:p_2 Expr4:p_3  {: RESULT = new Latte.Absyn.EAdd(p_1,p_2,p_3); :} 
  | Expr4:p_1  {: RESULT = p_1; :}
;
Expr2 ::= Expr2:p_1 RelOp:p_2 Expr3:p_3  {: RESULT = new Latte.Absyn.ERel(p_1,p_2,p_3); :} 
  | Expr3:p_1  {: RESULT = p_1; :}
;
Expr1 ::= Expr2:p_1 _SYMB_11 Expr1:p_3  {: RESULT = new Latte.Absyn.EAnd(p_1,p_3); :} 
  | Expr2:p_1  {: RESULT = p_1; :}
;
Expr ::= Expr1:p_1 _SYMB_12 Expr:p_3  {: RESULT = new Latte.Absyn.EOr(p_1,p_3); :} 
  | Expr1:p_1  {: RESULT = p_1; :}
;
ListExpr ::=  /* empty */  {: RESULT = new Latte.Absyn.ListExpr(); :} 
  | Expr:p_1  {: RESULT = new Latte.Absyn.ListExpr(); RESULT.addLast(p_1); :}
  | Expr:p_1 _SYMB_2 ListExpr:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
AddOp ::= _SYMB_13  {: RESULT = new Latte.Absyn.Plus(); :} 
  | _SYMB_9  {: RESULT = new Latte.Absyn.Minus(); :}
;
MulOp ::= _SYMB_14  {: RESULT = new Latte.Absyn.Times(); :} 
  | _SYMB_15  {: RESULT = new Latte.Absyn.Div(); :}
  | _SYMB_16  {: RESULT = new Latte.Absyn.Mod(); :}
;
RelOp ::= _SYMB_17  {: RESULT = new Latte.Absyn.LTH(); :} 
  | _SYMB_18  {: RESULT = new Latte.Absyn.LE(); :}
  | _SYMB_19  {: RESULT = new Latte.Absyn.GTH(); :}
  | _SYMB_20  {: RESULT = new Latte.Absyn.GE(); :}
  | _SYMB_21  {: RESULT = new Latte.Absyn.EQU(); :}
  | _SYMB_22  {: RESULT = new Latte.Absyn.NE(); :}
;

