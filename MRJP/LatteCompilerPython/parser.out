Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> listtopdef
Rule 2     listexpr -> <empty>
Rule 3     listexpr -> expr
Rule 4     listexpr -> listexpr COMMA expr
Rule 5     listtopdef -> <empty>
Rule 6     listtopdef -> topdef
Rule 7     listtopdef -> listtopdef topdef
Rule 8     liststmt -> stmt
Rule 9     liststmt -> liststmt stmt
Rule 10    listfields -> field
Rule 11    listfields -> listfields field
Rule 12    listitem -> item
Rule 13    listitem -> listitem COMMA item
Rule 14    listarg -> <empty>
Rule 15    listarg -> arg
Rule 16    listarg -> listarg COMMA arg
Rule 17    item -> ID
Rule 18    item -> ID EQUALS expr
Rule 19    arg -> type ID
Rule 20    field -> type ID SEMI
Rule 21    field -> ID ID SEMI
Rule 22    field -> ID LARRAY RARRAY ID SEMI
Rule 23    field -> type ID LPAREN listarg RPAREN block
Rule 24    ext -> <empty>
Rule 25    ext -> EXTENDS ID
Rule 26    topdef -> CLASS ID ext LBRACE listfields RBRACE
Rule 27    topdef -> type ID LPAREN listarg RPAREN block
Rule 28    block -> LBRACE RBRACE
Rule 29    block -> LBRACE liststmt RBRACE
Rule 30    stmt -> SEMI
Rule 31    stmt -> block
Rule 32    stmt -> type listitem SEMI
Rule 33    stmt -> ID listitem SEMI
Rule 34    stmt -> ID LARRAY RARRAY listitem SEMI
Rule 35    stmt -> expr6 EQUALS expr SEMI
Rule 36    stmt -> expr6 PLUSPLUS SEMI
Rule 37    stmt -> expr6 MINUSMINUS SEMI
Rule 38    stmt -> RETURN expr SEMI
Rule 39    stmt -> RETURN SEMI
Rule 40    stmt -> IF LPAREN expr RPAREN stmt
Rule 41    stmt -> IF LPAREN expr RPAREN stmt ELSE stmt
Rule 42    stmt -> WHILE LPAREN expr RPAREN stmt
Rule 43    stmt -> expr SEMI
Rule 44    stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt
Rule 45    stmt -> FOR LPAREN ID ID COL expr RPAREN stmt
Rule 46    expr6 -> NEW type_s LARRAY expr RARRAY
Rule 47    expr6 -> NEW ID LARRAY expr RARRAY
Rule 48    expr6 -> NEW ID
Rule 49    expr6 -> ID
Rule 50    expr6 -> expr6 DOT ID
Rule 51    expr6 -> expr6 DOT ID LARRAY expr RARRAY
Rule 52    expr6 -> ID LARRAY expr RARRAY
Rule 53    expr6 -> NUMBER
Rule 54    expr6 -> LPAREN ID RPAREN NULL
Rule 55    expr6 -> TRUE
Rule 56    expr6 -> FALSE
Rule 57    expr6 -> ID LPAREN listexpr RPAREN
Rule 58    expr6 -> expr6 DOT ID LPAREN listexpr RPAREN
Rule 59    expr6 -> LPAREN expr RPAREN
Rule 60    expr6 -> SENTENCE
Rule 61    expr5 -> MINUS expr6
Rule 62    expr5 -> expr6
Rule 63    expr5 -> NOT expr6
Rule 64    expr4 -> expr5
Rule 65    mulop -> TIMES
Rule 66    mulop -> DIVIDE
Rule 67    mulop -> MOD
Rule 68    expr4 -> expr4 mulop expr5
Rule 69    addop -> PLUS
Rule 70    addop -> MINUS
Rule 71    expr3 -> expr3 addop expr4
Rule 72    expr3 -> expr4
Rule 73    relop -> LT
Rule 74    relop -> LE
Rule 75    relop -> GT
Rule 76    relop -> GE
Rule 77    relop -> EQ
Rule 78    relop -> NE
Rule 79    expr2 -> expr2 relop expr3
Rule 80    expr2 -> expr3
Rule 81    expr1 -> expr2 AND expr1
Rule 82    expr1 -> expr2
Rule 83    expr -> expr1 OR expr
Rule 84    expr -> expr1
Rule 85    type_s -> INT
Rule 86    type_s -> STRING
Rule 87    type_s -> VOID
Rule 88    type_s -> BOOLEAN
Rule 89    type -> type_s
Rule 90    type -> type_s LARRAY RARRAY

Terminals, with rules where they appear

AND                  : 81
BOOLEAN              : 88
CLASS                : 26
COL                  : 44 45
COMMA                : 4 13 16
DIVIDE               : 66
DOT                  : 50 51 58
ELSE                 : 41
EQ                   : 77
EQUALS               : 18 35
EXTENDS              : 25
FALSE                : 56
FOR                  : 44 45
GE                   : 76
GT                   : 75
ID                   : 17 18 19 20 21 21 22 22 23 25 26 27 33 34 44 45 45 47 48 49 50 51 52 54 57 58
IF                   : 40 41
INT                  : 85
LARRAY               : 22 34 46 47 51 52 90
LBRACE               : 26 28 29
LE                   : 74
LPAREN               : 23 27 40 41 42 44 45 54 57 58 59
LT                   : 73
MINUS                : 61 70
MINUSMINUS           : 37
MOD                  : 67
NE                   : 78
NEW                  : 46 47 48
NOT                  : 63
NULL                 : 54
NUMBER               : 53
OR                   : 83
PLUS                 : 69
PLUSPLUS             : 36
RARRAY               : 22 34 46 47 51 52 90
RBRACE               : 26 28 29
RETURN               : 38 39
RPAREN               : 23 27 40 41 42 44 45 54 57 58 59
SEMI                 : 20 21 22 30 32 33 34 35 36 37 38 39 43
SENTENCE             : 60
STRING               : 86
TIMES                : 65
TRUE                 : 55
VOID                 : 87
WHILE                : 42
error                : 

Nonterminals, with rules where they appear

addop                : 71
arg                  : 15 16
block                : 23 27 31
expr                 : 3 4 18 35 38 40 41 42 43 44 45 46 47 51 52 59 83
expr1                : 81 83 84
expr2                : 79 81 82
expr3                : 71 79 80
expr4                : 68 71 72
expr5                : 64 68
expr6                : 35 36 37 50 51 58 61 62 63
ext                  : 26
field                : 10 11
item                 : 12 13
listarg              : 16 23 27
listexpr             : 4 57 58
listfields           : 11 26
listitem             : 13 32 33 34
liststmt             : 9 29
listtopdef           : 1 7
mulop                : 68
program              : 0
relop                : 79
stmt                 : 8 9 40 41 41 42 44 45
topdef               : 6 7
type                 : 19 20 23 27 32
type_s               : 44 46 89 90

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . listtopdef
    (5) listtopdef -> .
    (6) listtopdef -> . topdef
    (7) listtopdef -> . listtopdef topdef
    (26) topdef -> . CLASS ID ext LBRACE listfields RBRACE
    (27) topdef -> . type ID LPAREN listarg RPAREN block
    (89) type -> . type_s
    (90) type -> . type_s LARRAY RARRAY
    (85) type_s -> . INT
    (86) type_s -> . STRING
    (87) type_s -> . VOID
    (88) type_s -> . BOOLEAN

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    $end            reduce using rule 5 (listtopdef -> .)
    CLASS           shift and go to state 9
    INT             shift and go to state 5
    STRING          shift and go to state 10
    VOID            shift and go to state 2
    BOOLEAN         shift and go to state 7

  ! CLASS           [ reduce using rule 5 (listtopdef -> .) ]
  ! INT             [ reduce using rule 5 (listtopdef -> .) ]
  ! STRING          [ reduce using rule 5 (listtopdef -> .) ]
  ! VOID            [ reduce using rule 5 (listtopdef -> .) ]
  ! BOOLEAN         [ reduce using rule 5 (listtopdef -> .) ]

    topdef                         shift and go to state 1
    listtopdef                     shift and go to state 3
    type_s                         shift and go to state 4
    program                        shift and go to state 6
    type                           shift and go to state 8

state 1

    (6) listtopdef -> topdef .

    CLASS           reduce using rule 6 (listtopdef -> topdef .)
    INT             reduce using rule 6 (listtopdef -> topdef .)
    STRING          reduce using rule 6 (listtopdef -> topdef .)
    VOID            reduce using rule 6 (listtopdef -> topdef .)
    BOOLEAN         reduce using rule 6 (listtopdef -> topdef .)
    $end            reduce using rule 6 (listtopdef -> topdef .)


state 2

    (87) type_s -> VOID .

    LARRAY          reduce using rule 87 (type_s -> VOID .)
    ID              reduce using rule 87 (type_s -> VOID .)


state 3

    (1) program -> listtopdef .
    (7) listtopdef -> listtopdef . topdef
    (26) topdef -> . CLASS ID ext LBRACE listfields RBRACE
    (27) topdef -> . type ID LPAREN listarg RPAREN block
    (89) type -> . type_s
    (90) type -> . type_s LARRAY RARRAY
    (85) type_s -> . INT
    (86) type_s -> . STRING
    (87) type_s -> . VOID
    (88) type_s -> . BOOLEAN

    $end            reduce using rule 1 (program -> listtopdef .)
    CLASS           shift and go to state 9
    INT             shift and go to state 5
    STRING          shift and go to state 10
    VOID            shift and go to state 2
    BOOLEAN         shift and go to state 7

    topdef                         shift and go to state 11
    type_s                         shift and go to state 4
    type                           shift and go to state 8

state 4

    (89) type -> type_s .
    (90) type -> type_s . LARRAY RARRAY

    ID              reduce using rule 89 (type -> type_s .)
    LARRAY          shift and go to state 12


state 5

    (85) type_s -> INT .

    LARRAY          reduce using rule 85 (type_s -> INT .)
    ID              reduce using rule 85 (type_s -> INT .)


state 6

    (0) S' -> program .



state 7

    (88) type_s -> BOOLEAN .

    LARRAY          reduce using rule 88 (type_s -> BOOLEAN .)
    ID              reduce using rule 88 (type_s -> BOOLEAN .)


state 8

    (27) topdef -> type . ID LPAREN listarg RPAREN block

    ID              shift and go to state 13


state 9

    (26) topdef -> CLASS . ID ext LBRACE listfields RBRACE

    ID              shift and go to state 14


state 10

    (86) type_s -> STRING .

    LARRAY          reduce using rule 86 (type_s -> STRING .)
    ID              reduce using rule 86 (type_s -> STRING .)


state 11

    (7) listtopdef -> listtopdef topdef .

    CLASS           reduce using rule 7 (listtopdef -> listtopdef topdef .)
    INT             reduce using rule 7 (listtopdef -> listtopdef topdef .)
    STRING          reduce using rule 7 (listtopdef -> listtopdef topdef .)
    VOID            reduce using rule 7 (listtopdef -> listtopdef topdef .)
    BOOLEAN         reduce using rule 7 (listtopdef -> listtopdef topdef .)
    $end            reduce using rule 7 (listtopdef -> listtopdef topdef .)


state 12

    (90) type -> type_s LARRAY . RARRAY

    RARRAY          shift and go to state 15


state 13

    (27) topdef -> type ID . LPAREN listarg RPAREN block

    LPAREN          shift and go to state 16


state 14

    (26) topdef -> CLASS ID . ext LBRACE listfields RBRACE
    (24) ext -> .
    (25) ext -> . EXTENDS ID

    LBRACE          reduce using rule 24 (ext -> .)
    EXTENDS         shift and go to state 18

    ext                            shift and go to state 17

state 15

    (90) type -> type_s LARRAY RARRAY .

    ID              reduce using rule 90 (type -> type_s LARRAY RARRAY .)


state 16

    (27) topdef -> type ID LPAREN . listarg RPAREN block
    (14) listarg -> .
    (15) listarg -> . arg
    (16) listarg -> . listarg COMMA arg
    (19) arg -> . type ID
    (89) type -> . type_s
    (90) type -> . type_s LARRAY RARRAY
    (85) type_s -> . INT
    (86) type_s -> . STRING
    (87) type_s -> . VOID
    (88) type_s -> . BOOLEAN

    RPAREN          reduce using rule 14 (listarg -> .)
    COMMA           reduce using rule 14 (listarg -> .)
    INT             shift and go to state 5
    STRING          shift and go to state 10
    VOID            shift and go to state 2
    BOOLEAN         shift and go to state 7

    type_s                         shift and go to state 4
    listarg                        shift and go to state 19
    type                           shift and go to state 21
    arg                            shift and go to state 20

state 17

    (26) topdef -> CLASS ID ext . LBRACE listfields RBRACE

    LBRACE          shift and go to state 22


state 18

    (25) ext -> EXTENDS . ID

    ID              shift and go to state 23


state 19

    (27) topdef -> type ID LPAREN listarg . RPAREN block
    (16) listarg -> listarg . COMMA arg

    RPAREN          shift and go to state 24
    COMMA           shift and go to state 25


state 20

    (15) listarg -> arg .

    RPAREN          reduce using rule 15 (listarg -> arg .)
    COMMA           reduce using rule 15 (listarg -> arg .)


state 21

    (19) arg -> type . ID

    ID              shift and go to state 26


state 22

    (26) topdef -> CLASS ID ext LBRACE . listfields RBRACE
    (10) listfields -> . field
    (11) listfields -> . listfields field
    (20) field -> . type ID SEMI
    (21) field -> . ID ID SEMI
    (22) field -> . ID LARRAY RARRAY ID SEMI
    (23) field -> . type ID LPAREN listarg RPAREN block
    (89) type -> . type_s
    (90) type -> . type_s LARRAY RARRAY
    (85) type_s -> . INT
    (86) type_s -> . STRING
    (87) type_s -> . VOID
    (88) type_s -> . BOOLEAN

    ID              shift and go to state 29
    INT             shift and go to state 5
    STRING          shift and go to state 10
    VOID            shift and go to state 2
    BOOLEAN         shift and go to state 7

    type_s                         shift and go to state 4
    field                          shift and go to state 28
    type                           shift and go to state 30
    listfields                     shift and go to state 27

state 23

    (25) ext -> EXTENDS ID .

    LBRACE          reduce using rule 25 (ext -> EXTENDS ID .)


state 24

    (27) topdef -> type ID LPAREN listarg RPAREN . block
    (28) block -> . LBRACE RBRACE
    (29) block -> . LBRACE liststmt RBRACE

    LBRACE          shift and go to state 31

    block                          shift and go to state 32

state 25

    (16) listarg -> listarg COMMA . arg
    (19) arg -> . type ID
    (89) type -> . type_s
    (90) type -> . type_s LARRAY RARRAY
    (85) type_s -> . INT
    (86) type_s -> . STRING
    (87) type_s -> . VOID
    (88) type_s -> . BOOLEAN

    INT             shift and go to state 5
    STRING          shift and go to state 10
    VOID            shift and go to state 2
    BOOLEAN         shift and go to state 7

    type_s                         shift and go to state 4
    type                           shift and go to state 21
    arg                            shift and go to state 33

state 26

    (19) arg -> type ID .

    RPAREN          reduce using rule 19 (arg -> type ID .)
    COMMA           reduce using rule 19 (arg -> type ID .)


state 27

    (26) topdef -> CLASS ID ext LBRACE listfields . RBRACE
    (11) listfields -> listfields . field
    (20) field -> . type ID SEMI
    (21) field -> . ID ID SEMI
    (22) field -> . ID LARRAY RARRAY ID SEMI
    (23) field -> . type ID LPAREN listarg RPAREN block
    (89) type -> . type_s
    (90) type -> . type_s LARRAY RARRAY
    (85) type_s -> . INT
    (86) type_s -> . STRING
    (87) type_s -> . VOID
    (88) type_s -> . BOOLEAN

    RBRACE          shift and go to state 34
    ID              shift and go to state 29
    INT             shift and go to state 5
    STRING          shift and go to state 10
    VOID            shift and go to state 2
    BOOLEAN         shift and go to state 7

    type_s                         shift and go to state 4
    field                          shift and go to state 35
    type                           shift and go to state 30

state 28

    (10) listfields -> field .

    RBRACE          reduce using rule 10 (listfields -> field .)
    ID              reduce using rule 10 (listfields -> field .)
    INT             reduce using rule 10 (listfields -> field .)
    STRING          reduce using rule 10 (listfields -> field .)
    VOID            reduce using rule 10 (listfields -> field .)
    BOOLEAN         reduce using rule 10 (listfields -> field .)


state 29

    (21) field -> ID . ID SEMI
    (22) field -> ID . LARRAY RARRAY ID SEMI

    ID              shift and go to state 36
    LARRAY          shift and go to state 37


state 30

    (20) field -> type . ID SEMI
    (23) field -> type . ID LPAREN listarg RPAREN block

    ID              shift and go to state 38


state 31

    (28) block -> LBRACE . RBRACE
    (29) block -> LBRACE . liststmt RBRACE
    (8) liststmt -> . stmt
    (9) liststmt -> . liststmt stmt
    (30) stmt -> . SEMI
    (31) stmt -> . block
    (32) stmt -> . type listitem SEMI
    (33) stmt -> . ID listitem SEMI
    (34) stmt -> . ID LARRAY RARRAY listitem SEMI
    (35) stmt -> . expr6 EQUALS expr SEMI
    (36) stmt -> . expr6 PLUSPLUS SEMI
    (37) stmt -> . expr6 MINUSMINUS SEMI
    (38) stmt -> . RETURN expr SEMI
    (39) stmt -> . RETURN SEMI
    (40) stmt -> . IF LPAREN expr RPAREN stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (42) stmt -> . WHILE LPAREN expr RPAREN stmt
    (43) stmt -> . expr SEMI
    (44) stmt -> . FOR LPAREN type_s ID COL expr RPAREN stmt
    (45) stmt -> . FOR LPAREN ID ID COL expr RPAREN stmt
    (28) block -> . LBRACE RBRACE
    (29) block -> . LBRACE liststmt RBRACE
    (89) type -> . type_s
    (90) type -> . type_s LARRAY RARRAY
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (85) type_s -> . INT
    (86) type_s -> . STRING
    (87) type_s -> . VOID
    (88) type_s -> . BOOLEAN
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6

    RBRACE          shift and go to state 53
    SEMI            shift and go to state 45
    ID              shift and go to state 58
    RETURN          shift and go to state 39
    IF              shift and go to state 59
    WHILE           shift and go to state 42
    FOR             shift and go to state 54
    LBRACE          shift and go to state 31
    NEW             shift and go to state 43
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55
    INT             shift and go to state 5
    STRING          shift and go to state 10
    VOID            shift and go to state 2
    BOOLEAN         shift and go to state 7
    MINUS           shift and go to state 46
    NOT             shift and go to state 62

    expr2                          shift and go to state 47
    expr                           shift and go to state 61
    liststmt                       shift and go to state 40
    stmt                           shift and go to state 56
    type_s                         shift and go to state 4
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 49
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51
    type                           shift and go to state 52
    block                          shift and go to state 64

state 32

    (27) topdef -> type ID LPAREN listarg RPAREN block .

    CLASS           reduce using rule 27 (topdef -> type ID LPAREN listarg RPAREN block .)
    INT             reduce using rule 27 (topdef -> type ID LPAREN listarg RPAREN block .)
    STRING          reduce using rule 27 (topdef -> type ID LPAREN listarg RPAREN block .)
    VOID            reduce using rule 27 (topdef -> type ID LPAREN listarg RPAREN block .)
    BOOLEAN         reduce using rule 27 (topdef -> type ID LPAREN listarg RPAREN block .)
    $end            reduce using rule 27 (topdef -> type ID LPAREN listarg RPAREN block .)


state 33

    (16) listarg -> listarg COMMA arg .

    RPAREN          reduce using rule 16 (listarg -> listarg COMMA arg .)
    COMMA           reduce using rule 16 (listarg -> listarg COMMA arg .)


state 34

    (26) topdef -> CLASS ID ext LBRACE listfields RBRACE .

    CLASS           reduce using rule 26 (topdef -> CLASS ID ext LBRACE listfields RBRACE .)
    INT             reduce using rule 26 (topdef -> CLASS ID ext LBRACE listfields RBRACE .)
    STRING          reduce using rule 26 (topdef -> CLASS ID ext LBRACE listfields RBRACE .)
    VOID            reduce using rule 26 (topdef -> CLASS ID ext LBRACE listfields RBRACE .)
    BOOLEAN         reduce using rule 26 (topdef -> CLASS ID ext LBRACE listfields RBRACE .)
    $end            reduce using rule 26 (topdef -> CLASS ID ext LBRACE listfields RBRACE .)


state 35

    (11) listfields -> listfields field .

    RBRACE          reduce using rule 11 (listfields -> listfields field .)
    ID              reduce using rule 11 (listfields -> listfields field .)
    INT             reduce using rule 11 (listfields -> listfields field .)
    STRING          reduce using rule 11 (listfields -> listfields field .)
    VOID            reduce using rule 11 (listfields -> listfields field .)
    BOOLEAN         reduce using rule 11 (listfields -> listfields field .)


state 36

    (21) field -> ID ID . SEMI

    SEMI            shift and go to state 65


state 37

    (22) field -> ID LARRAY . RARRAY ID SEMI

    RARRAY          shift and go to state 66


state 38

    (20) field -> type ID . SEMI
    (23) field -> type ID . LPAREN listarg RPAREN block

    SEMI            shift and go to state 67
    LPAREN          shift and go to state 68


state 39

    (38) stmt -> RETURN . expr SEMI
    (39) stmt -> RETURN . SEMI
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    SEMI            shift and go to state 69
    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr                           shift and go to state 72
    expr2                          shift and go to state 47
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 40

    (29) block -> LBRACE liststmt . RBRACE
    (9) liststmt -> liststmt . stmt
    (30) stmt -> . SEMI
    (31) stmt -> . block
    (32) stmt -> . type listitem SEMI
    (33) stmt -> . ID listitem SEMI
    (34) stmt -> . ID LARRAY RARRAY listitem SEMI
    (35) stmt -> . expr6 EQUALS expr SEMI
    (36) stmt -> . expr6 PLUSPLUS SEMI
    (37) stmt -> . expr6 MINUSMINUS SEMI
    (38) stmt -> . RETURN expr SEMI
    (39) stmt -> . RETURN SEMI
    (40) stmt -> . IF LPAREN expr RPAREN stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (42) stmt -> . WHILE LPAREN expr RPAREN stmt
    (43) stmt -> . expr SEMI
    (44) stmt -> . FOR LPAREN type_s ID COL expr RPAREN stmt
    (45) stmt -> . FOR LPAREN ID ID COL expr RPAREN stmt
    (28) block -> . LBRACE RBRACE
    (29) block -> . LBRACE liststmt RBRACE
    (89) type -> . type_s
    (90) type -> . type_s LARRAY RARRAY
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (85) type_s -> . INT
    (86) type_s -> . STRING
    (87) type_s -> . VOID
    (88) type_s -> . BOOLEAN
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6

    RBRACE          shift and go to state 73
    SEMI            shift and go to state 45
    ID              shift and go to state 58
    RETURN          shift and go to state 39
    IF              shift and go to state 59
    WHILE           shift and go to state 42
    FOR             shift and go to state 54
    LBRACE          shift and go to state 31
    NEW             shift and go to state 43
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55
    INT             shift and go to state 5
    STRING          shift and go to state 10
    VOID            shift and go to state 2
    BOOLEAN         shift and go to state 7
    MINUS           shift and go to state 46
    NOT             shift and go to state 62

    expr2                          shift and go to state 47
    expr                           shift and go to state 61
    stmt                           shift and go to state 74
    type_s                         shift and go to state 4
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 49
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51
    type                           shift and go to state 52
    block                          shift and go to state 64

state 41

    (53) expr6 -> NUMBER .

    DOT             reduce using rule 53 (expr6 -> NUMBER .)
    TIMES           reduce using rule 53 (expr6 -> NUMBER .)
    DIVIDE          reduce using rule 53 (expr6 -> NUMBER .)
    MOD             reduce using rule 53 (expr6 -> NUMBER .)
    PLUS            reduce using rule 53 (expr6 -> NUMBER .)
    MINUS           reduce using rule 53 (expr6 -> NUMBER .)
    AND             reduce using rule 53 (expr6 -> NUMBER .)
    LT              reduce using rule 53 (expr6 -> NUMBER .)
    LE              reduce using rule 53 (expr6 -> NUMBER .)
    GT              reduce using rule 53 (expr6 -> NUMBER .)
    GE              reduce using rule 53 (expr6 -> NUMBER .)
    EQ              reduce using rule 53 (expr6 -> NUMBER .)
    NE              reduce using rule 53 (expr6 -> NUMBER .)
    OR              reduce using rule 53 (expr6 -> NUMBER .)
    RPAREN          reduce using rule 53 (expr6 -> NUMBER .)
    COMMA           reduce using rule 53 (expr6 -> NUMBER .)
    SEMI            reduce using rule 53 (expr6 -> NUMBER .)
    RARRAY          reduce using rule 53 (expr6 -> NUMBER .)
    EQUALS          reduce using rule 53 (expr6 -> NUMBER .)
    PLUSPLUS        reduce using rule 53 (expr6 -> NUMBER .)
    MINUSMINUS      reduce using rule 53 (expr6 -> NUMBER .)


state 42

    (42) stmt -> WHILE . LPAREN expr RPAREN stmt

    LPAREN          shift and go to state 75


state 43

    (46) expr6 -> NEW . type_s LARRAY expr RARRAY
    (47) expr6 -> NEW . ID LARRAY expr RARRAY
    (48) expr6 -> NEW . ID
    (85) type_s -> . INT
    (86) type_s -> . STRING
    (87) type_s -> . VOID
    (88) type_s -> . BOOLEAN

    ID              shift and go to state 77
    INT             shift and go to state 5
    STRING          shift and go to state 10
    VOID            shift and go to state 2
    BOOLEAN         shift and go to state 7

    type_s                         shift and go to state 76

state 44

    (55) expr6 -> TRUE .

    DOT             reduce using rule 55 (expr6 -> TRUE .)
    TIMES           reduce using rule 55 (expr6 -> TRUE .)
    DIVIDE          reduce using rule 55 (expr6 -> TRUE .)
    MOD             reduce using rule 55 (expr6 -> TRUE .)
    PLUS            reduce using rule 55 (expr6 -> TRUE .)
    MINUS           reduce using rule 55 (expr6 -> TRUE .)
    AND             reduce using rule 55 (expr6 -> TRUE .)
    LT              reduce using rule 55 (expr6 -> TRUE .)
    LE              reduce using rule 55 (expr6 -> TRUE .)
    GT              reduce using rule 55 (expr6 -> TRUE .)
    GE              reduce using rule 55 (expr6 -> TRUE .)
    EQ              reduce using rule 55 (expr6 -> TRUE .)
    NE              reduce using rule 55 (expr6 -> TRUE .)
    OR              reduce using rule 55 (expr6 -> TRUE .)
    RPAREN          reduce using rule 55 (expr6 -> TRUE .)
    COMMA           reduce using rule 55 (expr6 -> TRUE .)
    SEMI            reduce using rule 55 (expr6 -> TRUE .)
    RARRAY          reduce using rule 55 (expr6 -> TRUE .)
    EQUALS          reduce using rule 55 (expr6 -> TRUE .)
    PLUSPLUS        reduce using rule 55 (expr6 -> TRUE .)
    MINUSMINUS      reduce using rule 55 (expr6 -> TRUE .)


state 45

    (30) stmt -> SEMI .

    RBRACE          reduce using rule 30 (stmt -> SEMI .)
    SEMI            reduce using rule 30 (stmt -> SEMI .)
    ID              reduce using rule 30 (stmt -> SEMI .)
    RETURN          reduce using rule 30 (stmt -> SEMI .)
    IF              reduce using rule 30 (stmt -> SEMI .)
    WHILE           reduce using rule 30 (stmt -> SEMI .)
    FOR             reduce using rule 30 (stmt -> SEMI .)
    LBRACE          reduce using rule 30 (stmt -> SEMI .)
    NEW             reduce using rule 30 (stmt -> SEMI .)
    NUMBER          reduce using rule 30 (stmt -> SEMI .)
    LPAREN          reduce using rule 30 (stmt -> SEMI .)
    TRUE            reduce using rule 30 (stmt -> SEMI .)
    FALSE           reduce using rule 30 (stmt -> SEMI .)
    SENTENCE        reduce using rule 30 (stmt -> SEMI .)
    INT             reduce using rule 30 (stmt -> SEMI .)
    STRING          reduce using rule 30 (stmt -> SEMI .)
    VOID            reduce using rule 30 (stmt -> SEMI .)
    BOOLEAN         reduce using rule 30 (stmt -> SEMI .)
    MINUS           reduce using rule 30 (stmt -> SEMI .)
    NOT             reduce using rule 30 (stmt -> SEMI .)
    ELSE            reduce using rule 30 (stmt -> SEMI .)


state 46

    (61) expr5 -> MINUS . expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr6                          shift and go to state 78

state 47

    (81) expr1 -> expr2 . AND expr1
    (82) expr1 -> expr2 .
    (79) expr2 -> expr2 . relop expr3
    (73) relop -> . LT
    (74) relop -> . LE
    (75) relop -> . GT
    (76) relop -> . GE
    (77) relop -> . EQ
    (78) relop -> . NE

    AND             shift and go to state 79
    OR              reduce using rule 82 (expr1 -> expr2 .)
    SEMI            reduce using rule 82 (expr1 -> expr2 .)
    RARRAY          reduce using rule 82 (expr1 -> expr2 .)
    RPAREN          reduce using rule 82 (expr1 -> expr2 .)
    COMMA           reduce using rule 82 (expr1 -> expr2 .)
    LT              shift and go to state 85
    LE              shift and go to state 81
    GT              shift and go to state 80
    GE              shift and go to state 83
    EQ              shift and go to state 86
    NE              shift and go to state 84

    relop                          shift and go to state 82

state 48

    (80) expr2 -> expr3 .
    (71) expr3 -> expr3 . addop expr4
    (69) addop -> . PLUS
    (70) addop -> . MINUS

    AND             reduce using rule 80 (expr2 -> expr3 .)
    LT              reduce using rule 80 (expr2 -> expr3 .)
    LE              reduce using rule 80 (expr2 -> expr3 .)
    GT              reduce using rule 80 (expr2 -> expr3 .)
    GE              reduce using rule 80 (expr2 -> expr3 .)
    EQ              reduce using rule 80 (expr2 -> expr3 .)
    NE              reduce using rule 80 (expr2 -> expr3 .)
    OR              reduce using rule 80 (expr2 -> expr3 .)
    RARRAY          reduce using rule 80 (expr2 -> expr3 .)
    RPAREN          reduce using rule 80 (expr2 -> expr3 .)
    COMMA           reduce using rule 80 (expr2 -> expr3 .)
    SEMI            reduce using rule 80 (expr2 -> expr3 .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88

    addop                          shift and go to state 89

state 49

    (35) stmt -> expr6 . EQUALS expr SEMI
    (36) stmt -> expr6 . PLUSPLUS SEMI
    (37) stmt -> expr6 . MINUSMINUS SEMI
    (50) expr6 -> expr6 . DOT ID
    (51) expr6 -> expr6 . DOT ID LARRAY expr RARRAY
    (58) expr6 -> expr6 . DOT ID LPAREN listexpr RPAREN
    (62) expr5 -> expr6 .

    EQUALS          shift and go to state 91
    PLUSPLUS        shift and go to state 90
    MINUSMINUS      shift and go to state 92
    DOT             shift and go to state 93
    TIMES           reduce using rule 62 (expr5 -> expr6 .)
    DIVIDE          reduce using rule 62 (expr5 -> expr6 .)
    MOD             reduce using rule 62 (expr5 -> expr6 .)
    PLUS            reduce using rule 62 (expr5 -> expr6 .)
    MINUS           reduce using rule 62 (expr5 -> expr6 .)
    AND             reduce using rule 62 (expr5 -> expr6 .)
    LT              reduce using rule 62 (expr5 -> expr6 .)
    LE              reduce using rule 62 (expr5 -> expr6 .)
    GT              reduce using rule 62 (expr5 -> expr6 .)
    GE              reduce using rule 62 (expr5 -> expr6 .)
    EQ              reduce using rule 62 (expr5 -> expr6 .)
    NE              reduce using rule 62 (expr5 -> expr6 .)
    OR              reduce using rule 62 (expr5 -> expr6 .)
    SEMI            reduce using rule 62 (expr5 -> expr6 .)


state 50

    (72) expr3 -> expr4 .
    (68) expr4 -> expr4 . mulop expr5
    (65) mulop -> . TIMES
    (66) mulop -> . DIVIDE
    (67) mulop -> . MOD

    PLUS            reduce using rule 72 (expr3 -> expr4 .)
    MINUS           reduce using rule 72 (expr3 -> expr4 .)
    AND             reduce using rule 72 (expr3 -> expr4 .)
    LT              reduce using rule 72 (expr3 -> expr4 .)
    LE              reduce using rule 72 (expr3 -> expr4 .)
    GT              reduce using rule 72 (expr3 -> expr4 .)
    GE              reduce using rule 72 (expr3 -> expr4 .)
    EQ              reduce using rule 72 (expr3 -> expr4 .)
    NE              reduce using rule 72 (expr3 -> expr4 .)
    OR              reduce using rule 72 (expr3 -> expr4 .)
    SEMI            reduce using rule 72 (expr3 -> expr4 .)
    RPAREN          reduce using rule 72 (expr3 -> expr4 .)
    RARRAY          reduce using rule 72 (expr3 -> expr4 .)
    COMMA           reduce using rule 72 (expr3 -> expr4 .)
    TIMES           shift and go to state 95
    DIVIDE          shift and go to state 94
    MOD             shift and go to state 97

    mulop                          shift and go to state 96

state 51

    (64) expr4 -> expr5 .

    TIMES           reduce using rule 64 (expr4 -> expr5 .)
    DIVIDE          reduce using rule 64 (expr4 -> expr5 .)
    MOD             reduce using rule 64 (expr4 -> expr5 .)
    PLUS            reduce using rule 64 (expr4 -> expr5 .)
    MINUS           reduce using rule 64 (expr4 -> expr5 .)
    AND             reduce using rule 64 (expr4 -> expr5 .)
    LT              reduce using rule 64 (expr4 -> expr5 .)
    LE              reduce using rule 64 (expr4 -> expr5 .)
    GT              reduce using rule 64 (expr4 -> expr5 .)
    GE              reduce using rule 64 (expr4 -> expr5 .)
    EQ              reduce using rule 64 (expr4 -> expr5 .)
    NE              reduce using rule 64 (expr4 -> expr5 .)
    OR              reduce using rule 64 (expr4 -> expr5 .)
    SEMI            reduce using rule 64 (expr4 -> expr5 .)
    RPAREN          reduce using rule 64 (expr4 -> expr5 .)
    RARRAY          reduce using rule 64 (expr4 -> expr5 .)
    COMMA           reduce using rule 64 (expr4 -> expr5 .)


state 52

    (32) stmt -> type . listitem SEMI
    (12) listitem -> . item
    (13) listitem -> . listitem COMMA item
    (17) item -> . ID
    (18) item -> . ID EQUALS expr

    ID              shift and go to state 100

    item                           shift and go to state 98
    listitem                       shift and go to state 99

state 53

    (28) block -> LBRACE RBRACE .

    CLASS           reduce using rule 28 (block -> LBRACE RBRACE .)
    INT             reduce using rule 28 (block -> LBRACE RBRACE .)
    STRING          reduce using rule 28 (block -> LBRACE RBRACE .)
    VOID            reduce using rule 28 (block -> LBRACE RBRACE .)
    BOOLEAN         reduce using rule 28 (block -> LBRACE RBRACE .)
    $end            reduce using rule 28 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 28 (block -> LBRACE RBRACE .)
    SEMI            reduce using rule 28 (block -> LBRACE RBRACE .)
    ID              reduce using rule 28 (block -> LBRACE RBRACE .)
    RETURN          reduce using rule 28 (block -> LBRACE RBRACE .)
    IF              reduce using rule 28 (block -> LBRACE RBRACE .)
    WHILE           reduce using rule 28 (block -> LBRACE RBRACE .)
    FOR             reduce using rule 28 (block -> LBRACE RBRACE .)
    LBRACE          reduce using rule 28 (block -> LBRACE RBRACE .)
    NEW             reduce using rule 28 (block -> LBRACE RBRACE .)
    NUMBER          reduce using rule 28 (block -> LBRACE RBRACE .)
    LPAREN          reduce using rule 28 (block -> LBRACE RBRACE .)
    TRUE            reduce using rule 28 (block -> LBRACE RBRACE .)
    FALSE           reduce using rule 28 (block -> LBRACE RBRACE .)
    SENTENCE        reduce using rule 28 (block -> LBRACE RBRACE .)
    MINUS           reduce using rule 28 (block -> LBRACE RBRACE .)
    NOT             reduce using rule 28 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 28 (block -> LBRACE RBRACE .)


state 54

    (44) stmt -> FOR . LPAREN type_s ID COL expr RPAREN stmt
    (45) stmt -> FOR . LPAREN ID ID COL expr RPAREN stmt

    LPAREN          shift and go to state 101


state 55

    (60) expr6 -> SENTENCE .

    DOT             reduce using rule 60 (expr6 -> SENTENCE .)
    TIMES           reduce using rule 60 (expr6 -> SENTENCE .)
    DIVIDE          reduce using rule 60 (expr6 -> SENTENCE .)
    MOD             reduce using rule 60 (expr6 -> SENTENCE .)
    PLUS            reduce using rule 60 (expr6 -> SENTENCE .)
    MINUS           reduce using rule 60 (expr6 -> SENTENCE .)
    AND             reduce using rule 60 (expr6 -> SENTENCE .)
    LT              reduce using rule 60 (expr6 -> SENTENCE .)
    LE              reduce using rule 60 (expr6 -> SENTENCE .)
    GT              reduce using rule 60 (expr6 -> SENTENCE .)
    GE              reduce using rule 60 (expr6 -> SENTENCE .)
    EQ              reduce using rule 60 (expr6 -> SENTENCE .)
    NE              reduce using rule 60 (expr6 -> SENTENCE .)
    OR              reduce using rule 60 (expr6 -> SENTENCE .)
    RPAREN          reduce using rule 60 (expr6 -> SENTENCE .)
    COMMA           reduce using rule 60 (expr6 -> SENTENCE .)
    SEMI            reduce using rule 60 (expr6 -> SENTENCE .)
    RARRAY          reduce using rule 60 (expr6 -> SENTENCE .)
    EQUALS          reduce using rule 60 (expr6 -> SENTENCE .)
    PLUSPLUS        reduce using rule 60 (expr6 -> SENTENCE .)
    MINUSMINUS      reduce using rule 60 (expr6 -> SENTENCE .)


state 56

    (8) liststmt -> stmt .

    RBRACE          reduce using rule 8 (liststmt -> stmt .)
    SEMI            reduce using rule 8 (liststmt -> stmt .)
    ID              reduce using rule 8 (liststmt -> stmt .)
    RETURN          reduce using rule 8 (liststmt -> stmt .)
    IF              reduce using rule 8 (liststmt -> stmt .)
    WHILE           reduce using rule 8 (liststmt -> stmt .)
    FOR             reduce using rule 8 (liststmt -> stmt .)
    LBRACE          reduce using rule 8 (liststmt -> stmt .)
    NEW             reduce using rule 8 (liststmt -> stmt .)
    NUMBER          reduce using rule 8 (liststmt -> stmt .)
    LPAREN          reduce using rule 8 (liststmt -> stmt .)
    TRUE            reduce using rule 8 (liststmt -> stmt .)
    FALSE           reduce using rule 8 (liststmt -> stmt .)
    SENTENCE        reduce using rule 8 (liststmt -> stmt .)
    INT             reduce using rule 8 (liststmt -> stmt .)
    STRING          reduce using rule 8 (liststmt -> stmt .)
    VOID            reduce using rule 8 (liststmt -> stmt .)
    BOOLEAN         reduce using rule 8 (liststmt -> stmt .)
    MINUS           reduce using rule 8 (liststmt -> stmt .)
    NOT             reduce using rule 8 (liststmt -> stmt .)


state 57

    (54) expr6 -> LPAREN . ID RPAREN NULL
    (59) expr6 -> LPAREN . expr RPAREN
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    ID              shift and go to state 102
    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr                           shift and go to state 103
    expr2                          shift and go to state 47
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 58

    (33) stmt -> ID . listitem SEMI
    (34) stmt -> ID . LARRAY RARRAY listitem SEMI
    (49) expr6 -> ID .
    (52) expr6 -> ID . LARRAY expr RARRAY
    (57) expr6 -> ID . LPAREN listexpr RPAREN
    (12) listitem -> . item
    (13) listitem -> . listitem COMMA item
    (17) item -> . ID
    (18) item -> . ID EQUALS expr

    LARRAY          shift and go to state 104
    EQUALS          reduce using rule 49 (expr6 -> ID .)
    PLUSPLUS        reduce using rule 49 (expr6 -> ID .)
    MINUSMINUS      reduce using rule 49 (expr6 -> ID .)
    DOT             reduce using rule 49 (expr6 -> ID .)
    TIMES           reduce using rule 49 (expr6 -> ID .)
    DIVIDE          reduce using rule 49 (expr6 -> ID .)
    MOD             reduce using rule 49 (expr6 -> ID .)
    PLUS            reduce using rule 49 (expr6 -> ID .)
    MINUS           reduce using rule 49 (expr6 -> ID .)
    AND             reduce using rule 49 (expr6 -> ID .)
    LT              reduce using rule 49 (expr6 -> ID .)
    LE              reduce using rule 49 (expr6 -> ID .)
    GT              reduce using rule 49 (expr6 -> ID .)
    GE              reduce using rule 49 (expr6 -> ID .)
    EQ              reduce using rule 49 (expr6 -> ID .)
    NE              reduce using rule 49 (expr6 -> ID .)
    OR              reduce using rule 49 (expr6 -> ID .)
    SEMI            reduce using rule 49 (expr6 -> ID .)
    LPAREN          shift and go to state 105
    ID              shift and go to state 100

    listitem                       shift and go to state 106
    item                           shift and go to state 98

state 59

    (40) stmt -> IF . LPAREN expr RPAREN stmt
    (41) stmt -> IF . LPAREN expr RPAREN stmt ELSE stmt

    LPAREN          shift and go to state 107


state 60

    (56) expr6 -> FALSE .

    DOT             reduce using rule 56 (expr6 -> FALSE .)
    TIMES           reduce using rule 56 (expr6 -> FALSE .)
    DIVIDE          reduce using rule 56 (expr6 -> FALSE .)
    MOD             reduce using rule 56 (expr6 -> FALSE .)
    PLUS            reduce using rule 56 (expr6 -> FALSE .)
    MINUS           reduce using rule 56 (expr6 -> FALSE .)
    AND             reduce using rule 56 (expr6 -> FALSE .)
    LT              reduce using rule 56 (expr6 -> FALSE .)
    LE              reduce using rule 56 (expr6 -> FALSE .)
    GT              reduce using rule 56 (expr6 -> FALSE .)
    GE              reduce using rule 56 (expr6 -> FALSE .)
    EQ              reduce using rule 56 (expr6 -> FALSE .)
    NE              reduce using rule 56 (expr6 -> FALSE .)
    OR              reduce using rule 56 (expr6 -> FALSE .)
    RPAREN          reduce using rule 56 (expr6 -> FALSE .)
    COMMA           reduce using rule 56 (expr6 -> FALSE .)
    SEMI            reduce using rule 56 (expr6 -> FALSE .)
    RARRAY          reduce using rule 56 (expr6 -> FALSE .)
    EQUALS          reduce using rule 56 (expr6 -> FALSE .)
    PLUSPLUS        reduce using rule 56 (expr6 -> FALSE .)
    MINUSMINUS      reduce using rule 56 (expr6 -> FALSE .)


state 61

    (43) stmt -> expr . SEMI

    SEMI            shift and go to state 108


state 62

    (63) expr5 -> NOT . expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr6                          shift and go to state 109

state 63

    (83) expr -> expr1 . OR expr
    (84) expr -> expr1 .

    OR              shift and go to state 110
    RPAREN          reduce using rule 84 (expr -> expr1 .)
    COMMA           reduce using rule 84 (expr -> expr1 .)
    RARRAY          reduce using rule 84 (expr -> expr1 .)
    SEMI            reduce using rule 84 (expr -> expr1 .)


state 64

    (31) stmt -> block .

    RBRACE          reduce using rule 31 (stmt -> block .)
    SEMI            reduce using rule 31 (stmt -> block .)
    ID              reduce using rule 31 (stmt -> block .)
    RETURN          reduce using rule 31 (stmt -> block .)
    IF              reduce using rule 31 (stmt -> block .)
    WHILE           reduce using rule 31 (stmt -> block .)
    FOR             reduce using rule 31 (stmt -> block .)
    LBRACE          reduce using rule 31 (stmt -> block .)
    NEW             reduce using rule 31 (stmt -> block .)
    NUMBER          reduce using rule 31 (stmt -> block .)
    LPAREN          reduce using rule 31 (stmt -> block .)
    TRUE            reduce using rule 31 (stmt -> block .)
    FALSE           reduce using rule 31 (stmt -> block .)
    SENTENCE        reduce using rule 31 (stmt -> block .)
    INT             reduce using rule 31 (stmt -> block .)
    STRING          reduce using rule 31 (stmt -> block .)
    VOID            reduce using rule 31 (stmt -> block .)
    BOOLEAN         reduce using rule 31 (stmt -> block .)
    MINUS           reduce using rule 31 (stmt -> block .)
    NOT             reduce using rule 31 (stmt -> block .)
    ELSE            reduce using rule 31 (stmt -> block .)


state 65

    (21) field -> ID ID SEMI .

    RBRACE          reduce using rule 21 (field -> ID ID SEMI .)
    ID              reduce using rule 21 (field -> ID ID SEMI .)
    INT             reduce using rule 21 (field -> ID ID SEMI .)
    STRING          reduce using rule 21 (field -> ID ID SEMI .)
    VOID            reduce using rule 21 (field -> ID ID SEMI .)
    BOOLEAN         reduce using rule 21 (field -> ID ID SEMI .)


state 66

    (22) field -> ID LARRAY RARRAY . ID SEMI

    ID              shift and go to state 111


state 67

    (20) field -> type ID SEMI .

    RBRACE          reduce using rule 20 (field -> type ID SEMI .)
    ID              reduce using rule 20 (field -> type ID SEMI .)
    INT             reduce using rule 20 (field -> type ID SEMI .)
    STRING          reduce using rule 20 (field -> type ID SEMI .)
    VOID            reduce using rule 20 (field -> type ID SEMI .)
    BOOLEAN         reduce using rule 20 (field -> type ID SEMI .)


state 68

    (23) field -> type ID LPAREN . listarg RPAREN block
    (14) listarg -> .
    (15) listarg -> . arg
    (16) listarg -> . listarg COMMA arg
    (19) arg -> . type ID
    (89) type -> . type_s
    (90) type -> . type_s LARRAY RARRAY
    (85) type_s -> . INT
    (86) type_s -> . STRING
    (87) type_s -> . VOID
    (88) type_s -> . BOOLEAN

    RPAREN          reduce using rule 14 (listarg -> .)
    COMMA           reduce using rule 14 (listarg -> .)
    INT             shift and go to state 5
    STRING          shift and go to state 10
    VOID            shift and go to state 2
    BOOLEAN         shift and go to state 7

    type_s                         shift and go to state 4
    listarg                        shift and go to state 112
    type                           shift and go to state 21
    arg                            shift and go to state 20

state 69

    (39) stmt -> RETURN SEMI .

    RBRACE          reduce using rule 39 (stmt -> RETURN SEMI .)
    SEMI            reduce using rule 39 (stmt -> RETURN SEMI .)
    ID              reduce using rule 39 (stmt -> RETURN SEMI .)
    RETURN          reduce using rule 39 (stmt -> RETURN SEMI .)
    IF              reduce using rule 39 (stmt -> RETURN SEMI .)
    WHILE           reduce using rule 39 (stmt -> RETURN SEMI .)
    FOR             reduce using rule 39 (stmt -> RETURN SEMI .)
    LBRACE          reduce using rule 39 (stmt -> RETURN SEMI .)
    NEW             reduce using rule 39 (stmt -> RETURN SEMI .)
    NUMBER          reduce using rule 39 (stmt -> RETURN SEMI .)
    LPAREN          reduce using rule 39 (stmt -> RETURN SEMI .)
    TRUE            reduce using rule 39 (stmt -> RETURN SEMI .)
    FALSE           reduce using rule 39 (stmt -> RETURN SEMI .)
    SENTENCE        reduce using rule 39 (stmt -> RETURN SEMI .)
    INT             reduce using rule 39 (stmt -> RETURN SEMI .)
    STRING          reduce using rule 39 (stmt -> RETURN SEMI .)
    VOID            reduce using rule 39 (stmt -> RETURN SEMI .)
    BOOLEAN         reduce using rule 39 (stmt -> RETURN SEMI .)
    MINUS           reduce using rule 39 (stmt -> RETURN SEMI .)
    NOT             reduce using rule 39 (stmt -> RETURN SEMI .)
    ELSE            reduce using rule 39 (stmt -> RETURN SEMI .)


state 70

    (62) expr5 -> expr6 .
    (50) expr6 -> expr6 . DOT ID
    (51) expr6 -> expr6 . DOT ID LARRAY expr RARRAY
    (58) expr6 -> expr6 . DOT ID LPAREN listexpr RPAREN

    TIMES           reduce using rule 62 (expr5 -> expr6 .)
    DIVIDE          reduce using rule 62 (expr5 -> expr6 .)
    MOD             reduce using rule 62 (expr5 -> expr6 .)
    PLUS            reduce using rule 62 (expr5 -> expr6 .)
    MINUS           reduce using rule 62 (expr5 -> expr6 .)
    AND             reduce using rule 62 (expr5 -> expr6 .)
    LT              reduce using rule 62 (expr5 -> expr6 .)
    LE              reduce using rule 62 (expr5 -> expr6 .)
    GT              reduce using rule 62 (expr5 -> expr6 .)
    GE              reduce using rule 62 (expr5 -> expr6 .)
    EQ              reduce using rule 62 (expr5 -> expr6 .)
    NE              reduce using rule 62 (expr5 -> expr6 .)
    OR              reduce using rule 62 (expr5 -> expr6 .)
    RPAREN          reduce using rule 62 (expr5 -> expr6 .)
    COMMA           reduce using rule 62 (expr5 -> expr6 .)
    SEMI            reduce using rule 62 (expr5 -> expr6 .)
    RARRAY          reduce using rule 62 (expr5 -> expr6 .)
    DOT             shift and go to state 93


state 71

    (49) expr6 -> ID .
    (52) expr6 -> ID . LARRAY expr RARRAY
    (57) expr6 -> ID . LPAREN listexpr RPAREN

    DOT             reduce using rule 49 (expr6 -> ID .)
    TIMES           reduce using rule 49 (expr6 -> ID .)
    DIVIDE          reduce using rule 49 (expr6 -> ID .)
    MOD             reduce using rule 49 (expr6 -> ID .)
    PLUS            reduce using rule 49 (expr6 -> ID .)
    MINUS           reduce using rule 49 (expr6 -> ID .)
    AND             reduce using rule 49 (expr6 -> ID .)
    LT              reduce using rule 49 (expr6 -> ID .)
    LE              reduce using rule 49 (expr6 -> ID .)
    GT              reduce using rule 49 (expr6 -> ID .)
    GE              reduce using rule 49 (expr6 -> ID .)
    EQ              reduce using rule 49 (expr6 -> ID .)
    NE              reduce using rule 49 (expr6 -> ID .)
    OR              reduce using rule 49 (expr6 -> ID .)
    RPAREN          reduce using rule 49 (expr6 -> ID .)
    COMMA           reduce using rule 49 (expr6 -> ID .)
    SEMI            reduce using rule 49 (expr6 -> ID .)
    RARRAY          reduce using rule 49 (expr6 -> ID .)
    LARRAY          shift and go to state 113
    LPAREN          shift and go to state 105


state 72

    (38) stmt -> RETURN expr . SEMI

    SEMI            shift and go to state 114


state 73

    (29) block -> LBRACE liststmt RBRACE .

    CLASS           reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    INT             reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    STRING          reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    VOID            reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    BOOLEAN         reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    $end            reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    RBRACE          reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    SEMI            reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    ID              reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    RETURN          reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    IF              reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    WHILE           reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    FOR             reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    LBRACE          reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    NEW             reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    NUMBER          reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    LPAREN          reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    TRUE            reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    FALSE           reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    SENTENCE        reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    MINUS           reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    NOT             reduce using rule 29 (block -> LBRACE liststmt RBRACE .)
    ELSE            reduce using rule 29 (block -> LBRACE liststmt RBRACE .)


state 74

    (9) liststmt -> liststmt stmt .

    RBRACE          reduce using rule 9 (liststmt -> liststmt stmt .)
    SEMI            reduce using rule 9 (liststmt -> liststmt stmt .)
    ID              reduce using rule 9 (liststmt -> liststmt stmt .)
    RETURN          reduce using rule 9 (liststmt -> liststmt stmt .)
    IF              reduce using rule 9 (liststmt -> liststmt stmt .)
    WHILE           reduce using rule 9 (liststmt -> liststmt stmt .)
    FOR             reduce using rule 9 (liststmt -> liststmt stmt .)
    LBRACE          reduce using rule 9 (liststmt -> liststmt stmt .)
    NEW             reduce using rule 9 (liststmt -> liststmt stmt .)
    NUMBER          reduce using rule 9 (liststmt -> liststmt stmt .)
    LPAREN          reduce using rule 9 (liststmt -> liststmt stmt .)
    TRUE            reduce using rule 9 (liststmt -> liststmt stmt .)
    FALSE           reduce using rule 9 (liststmt -> liststmt stmt .)
    SENTENCE        reduce using rule 9 (liststmt -> liststmt stmt .)
    INT             reduce using rule 9 (liststmt -> liststmt stmt .)
    STRING          reduce using rule 9 (liststmt -> liststmt stmt .)
    VOID            reduce using rule 9 (liststmt -> liststmt stmt .)
    BOOLEAN         reduce using rule 9 (liststmt -> liststmt stmt .)
    MINUS           reduce using rule 9 (liststmt -> liststmt stmt .)
    NOT             reduce using rule 9 (liststmt -> liststmt stmt .)


state 75

    (42) stmt -> WHILE LPAREN . expr RPAREN stmt
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr                           shift and go to state 115
    expr2                          shift and go to state 47
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 76

    (46) expr6 -> NEW type_s . LARRAY expr RARRAY

    LARRAY          shift and go to state 116


state 77

    (47) expr6 -> NEW ID . LARRAY expr RARRAY
    (48) expr6 -> NEW ID .

    LARRAY          shift and go to state 117
    DOT             reduce using rule 48 (expr6 -> NEW ID .)
    TIMES           reduce using rule 48 (expr6 -> NEW ID .)
    DIVIDE          reduce using rule 48 (expr6 -> NEW ID .)
    MOD             reduce using rule 48 (expr6 -> NEW ID .)
    PLUS            reduce using rule 48 (expr6 -> NEW ID .)
    MINUS           reduce using rule 48 (expr6 -> NEW ID .)
    AND             reduce using rule 48 (expr6 -> NEW ID .)
    LT              reduce using rule 48 (expr6 -> NEW ID .)
    LE              reduce using rule 48 (expr6 -> NEW ID .)
    GT              reduce using rule 48 (expr6 -> NEW ID .)
    GE              reduce using rule 48 (expr6 -> NEW ID .)
    EQ              reduce using rule 48 (expr6 -> NEW ID .)
    NE              reduce using rule 48 (expr6 -> NEW ID .)
    OR              reduce using rule 48 (expr6 -> NEW ID .)
    RPAREN          reduce using rule 48 (expr6 -> NEW ID .)
    COMMA           reduce using rule 48 (expr6 -> NEW ID .)
    SEMI            reduce using rule 48 (expr6 -> NEW ID .)
    RARRAY          reduce using rule 48 (expr6 -> NEW ID .)
    EQUALS          reduce using rule 48 (expr6 -> NEW ID .)
    PLUSPLUS        reduce using rule 48 (expr6 -> NEW ID .)
    MINUSMINUS      reduce using rule 48 (expr6 -> NEW ID .)


state 78

    (61) expr5 -> MINUS expr6 .
    (50) expr6 -> expr6 . DOT ID
    (51) expr6 -> expr6 . DOT ID LARRAY expr RARRAY
    (58) expr6 -> expr6 . DOT ID LPAREN listexpr RPAREN

    TIMES           reduce using rule 61 (expr5 -> MINUS expr6 .)
    DIVIDE          reduce using rule 61 (expr5 -> MINUS expr6 .)
    MOD             reduce using rule 61 (expr5 -> MINUS expr6 .)
    PLUS            reduce using rule 61 (expr5 -> MINUS expr6 .)
    MINUS           reduce using rule 61 (expr5 -> MINUS expr6 .)
    AND             reduce using rule 61 (expr5 -> MINUS expr6 .)
    LT              reduce using rule 61 (expr5 -> MINUS expr6 .)
    LE              reduce using rule 61 (expr5 -> MINUS expr6 .)
    GT              reduce using rule 61 (expr5 -> MINUS expr6 .)
    GE              reduce using rule 61 (expr5 -> MINUS expr6 .)
    EQ              reduce using rule 61 (expr5 -> MINUS expr6 .)
    NE              reduce using rule 61 (expr5 -> MINUS expr6 .)
    OR              reduce using rule 61 (expr5 -> MINUS expr6 .)
    RPAREN          reduce using rule 61 (expr5 -> MINUS expr6 .)
    COMMA           reduce using rule 61 (expr5 -> MINUS expr6 .)
    SEMI            reduce using rule 61 (expr5 -> MINUS expr6 .)
    RARRAY          reduce using rule 61 (expr5 -> MINUS expr6 .)
    DOT             shift and go to state 93


state 79

    (81) expr1 -> expr2 AND . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr2                          shift and go to state 47
    expr3                          shift and go to state 48
    expr1                          shift and go to state 118
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 80

    (75) relop -> GT .

    MINUS           reduce using rule 75 (relop -> GT .)
    NOT             reduce using rule 75 (relop -> GT .)
    NEW             reduce using rule 75 (relop -> GT .)
    ID              reduce using rule 75 (relop -> GT .)
    NUMBER          reduce using rule 75 (relop -> GT .)
    LPAREN          reduce using rule 75 (relop -> GT .)
    TRUE            reduce using rule 75 (relop -> GT .)
    FALSE           reduce using rule 75 (relop -> GT .)
    SENTENCE        reduce using rule 75 (relop -> GT .)


state 81

    (74) relop -> LE .

    MINUS           reduce using rule 74 (relop -> LE .)
    NOT             reduce using rule 74 (relop -> LE .)
    NEW             reduce using rule 74 (relop -> LE .)
    ID              reduce using rule 74 (relop -> LE .)
    NUMBER          reduce using rule 74 (relop -> LE .)
    LPAREN          reduce using rule 74 (relop -> LE .)
    TRUE            reduce using rule 74 (relop -> LE .)
    FALSE           reduce using rule 74 (relop -> LE .)
    SENTENCE        reduce using rule 74 (relop -> LE .)


state 82

    (79) expr2 -> expr2 relop . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr3                          shift and go to state 119
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 83

    (76) relop -> GE .

    MINUS           reduce using rule 76 (relop -> GE .)
    NOT             reduce using rule 76 (relop -> GE .)
    NEW             reduce using rule 76 (relop -> GE .)
    ID              reduce using rule 76 (relop -> GE .)
    NUMBER          reduce using rule 76 (relop -> GE .)
    LPAREN          reduce using rule 76 (relop -> GE .)
    TRUE            reduce using rule 76 (relop -> GE .)
    FALSE           reduce using rule 76 (relop -> GE .)
    SENTENCE        reduce using rule 76 (relop -> GE .)


state 84

    (78) relop -> NE .

    MINUS           reduce using rule 78 (relop -> NE .)
    NOT             reduce using rule 78 (relop -> NE .)
    NEW             reduce using rule 78 (relop -> NE .)
    ID              reduce using rule 78 (relop -> NE .)
    NUMBER          reduce using rule 78 (relop -> NE .)
    LPAREN          reduce using rule 78 (relop -> NE .)
    TRUE            reduce using rule 78 (relop -> NE .)
    FALSE           reduce using rule 78 (relop -> NE .)
    SENTENCE        reduce using rule 78 (relop -> NE .)


state 85

    (73) relop -> LT .

    MINUS           reduce using rule 73 (relop -> LT .)
    NOT             reduce using rule 73 (relop -> LT .)
    NEW             reduce using rule 73 (relop -> LT .)
    ID              reduce using rule 73 (relop -> LT .)
    NUMBER          reduce using rule 73 (relop -> LT .)
    LPAREN          reduce using rule 73 (relop -> LT .)
    TRUE            reduce using rule 73 (relop -> LT .)
    FALSE           reduce using rule 73 (relop -> LT .)
    SENTENCE        reduce using rule 73 (relop -> LT .)


state 86

    (77) relop -> EQ .

    MINUS           reduce using rule 77 (relop -> EQ .)
    NOT             reduce using rule 77 (relop -> EQ .)
    NEW             reduce using rule 77 (relop -> EQ .)
    ID              reduce using rule 77 (relop -> EQ .)
    NUMBER          reduce using rule 77 (relop -> EQ .)
    LPAREN          reduce using rule 77 (relop -> EQ .)
    TRUE            reduce using rule 77 (relop -> EQ .)
    FALSE           reduce using rule 77 (relop -> EQ .)
    SENTENCE        reduce using rule 77 (relop -> EQ .)


state 87

    (69) addop -> PLUS .

    MINUS           reduce using rule 69 (addop -> PLUS .)
    NOT             reduce using rule 69 (addop -> PLUS .)
    NEW             reduce using rule 69 (addop -> PLUS .)
    ID              reduce using rule 69 (addop -> PLUS .)
    NUMBER          reduce using rule 69 (addop -> PLUS .)
    LPAREN          reduce using rule 69 (addop -> PLUS .)
    TRUE            reduce using rule 69 (addop -> PLUS .)
    FALSE           reduce using rule 69 (addop -> PLUS .)
    SENTENCE        reduce using rule 69 (addop -> PLUS .)


state 88

    (70) addop -> MINUS .

    MINUS           reduce using rule 70 (addop -> MINUS .)
    NOT             reduce using rule 70 (addop -> MINUS .)
    NEW             reduce using rule 70 (addop -> MINUS .)
    ID              reduce using rule 70 (addop -> MINUS .)
    NUMBER          reduce using rule 70 (addop -> MINUS .)
    LPAREN          reduce using rule 70 (addop -> MINUS .)
    TRUE            reduce using rule 70 (addop -> MINUS .)
    FALSE           reduce using rule 70 (addop -> MINUS .)
    SENTENCE        reduce using rule 70 (addop -> MINUS .)


state 89

    (71) expr3 -> expr3 addop . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr4                          shift and go to state 120
    expr6                          shift and go to state 70
    expr5                          shift and go to state 51

state 90

    (36) stmt -> expr6 PLUSPLUS . SEMI

    SEMI            shift and go to state 121


state 91

    (35) stmt -> expr6 EQUALS . expr SEMI
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr                           shift and go to state 122
    expr2                          shift and go to state 47
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 92

    (37) stmt -> expr6 MINUSMINUS . SEMI

    SEMI            shift and go to state 123


state 93

    (50) expr6 -> expr6 DOT . ID
    (51) expr6 -> expr6 DOT . ID LARRAY expr RARRAY
    (58) expr6 -> expr6 DOT . ID LPAREN listexpr RPAREN

    ID              shift and go to state 124


state 94

    (66) mulop -> DIVIDE .

    MINUS           reduce using rule 66 (mulop -> DIVIDE .)
    NOT             reduce using rule 66 (mulop -> DIVIDE .)
    NEW             reduce using rule 66 (mulop -> DIVIDE .)
    ID              reduce using rule 66 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 66 (mulop -> DIVIDE .)
    LPAREN          reduce using rule 66 (mulop -> DIVIDE .)
    TRUE            reduce using rule 66 (mulop -> DIVIDE .)
    FALSE           reduce using rule 66 (mulop -> DIVIDE .)
    SENTENCE        reduce using rule 66 (mulop -> DIVIDE .)


state 95

    (65) mulop -> TIMES .

    MINUS           reduce using rule 65 (mulop -> TIMES .)
    NOT             reduce using rule 65 (mulop -> TIMES .)
    NEW             reduce using rule 65 (mulop -> TIMES .)
    ID              reduce using rule 65 (mulop -> TIMES .)
    NUMBER          reduce using rule 65 (mulop -> TIMES .)
    LPAREN          reduce using rule 65 (mulop -> TIMES .)
    TRUE            reduce using rule 65 (mulop -> TIMES .)
    FALSE           reduce using rule 65 (mulop -> TIMES .)
    SENTENCE        reduce using rule 65 (mulop -> TIMES .)


state 96

    (68) expr4 -> expr4 mulop . expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr6                          shift and go to state 70
    expr5                          shift and go to state 125

state 97

    (67) mulop -> MOD .

    MINUS           reduce using rule 67 (mulop -> MOD .)
    NOT             reduce using rule 67 (mulop -> MOD .)
    NEW             reduce using rule 67 (mulop -> MOD .)
    ID              reduce using rule 67 (mulop -> MOD .)
    NUMBER          reduce using rule 67 (mulop -> MOD .)
    LPAREN          reduce using rule 67 (mulop -> MOD .)
    TRUE            reduce using rule 67 (mulop -> MOD .)
    FALSE           reduce using rule 67 (mulop -> MOD .)
    SENTENCE        reduce using rule 67 (mulop -> MOD .)


state 98

    (12) listitem -> item .

    SEMI            reduce using rule 12 (listitem -> item .)
    COMMA           reduce using rule 12 (listitem -> item .)


state 99

    (32) stmt -> type listitem . SEMI
    (13) listitem -> listitem . COMMA item

    SEMI            shift and go to state 127
    COMMA           shift and go to state 126


state 100

    (17) item -> ID .
    (18) item -> ID . EQUALS expr

    SEMI            reduce using rule 17 (item -> ID .)
    COMMA           reduce using rule 17 (item -> ID .)
    EQUALS          shift and go to state 128


state 101

    (44) stmt -> FOR LPAREN . type_s ID COL expr RPAREN stmt
    (45) stmt -> FOR LPAREN . ID ID COL expr RPAREN stmt
    (85) type_s -> . INT
    (86) type_s -> . STRING
    (87) type_s -> . VOID
    (88) type_s -> . BOOLEAN

    ID              shift and go to state 129
    INT             shift and go to state 5
    STRING          shift and go to state 10
    VOID            shift and go to state 2
    BOOLEAN         shift and go to state 7

    type_s                         shift and go to state 130

state 102

    (54) expr6 -> LPAREN ID . RPAREN NULL
    (49) expr6 -> ID .
    (52) expr6 -> ID . LARRAY expr RARRAY
    (57) expr6 -> ID . LPAREN listexpr RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 131
    DOT             reduce using rule 49 (expr6 -> ID .)
    TIMES           reduce using rule 49 (expr6 -> ID .)
    DIVIDE          reduce using rule 49 (expr6 -> ID .)
    MOD             reduce using rule 49 (expr6 -> ID .)
    PLUS            reduce using rule 49 (expr6 -> ID .)
    MINUS           reduce using rule 49 (expr6 -> ID .)
    AND             reduce using rule 49 (expr6 -> ID .)
    LT              reduce using rule 49 (expr6 -> ID .)
    LE              reduce using rule 49 (expr6 -> ID .)
    GT              reduce using rule 49 (expr6 -> ID .)
    GE              reduce using rule 49 (expr6 -> ID .)
    EQ              reduce using rule 49 (expr6 -> ID .)
    NE              reduce using rule 49 (expr6 -> ID .)
    OR              reduce using rule 49 (expr6 -> ID .)
    LARRAY          shift and go to state 113
    LPAREN          shift and go to state 105

  ! RPAREN          [ reduce using rule 49 (expr6 -> ID .) ]


state 103

    (59) expr6 -> LPAREN expr . RPAREN

    RPAREN          shift and go to state 132


state 104

    (34) stmt -> ID LARRAY . RARRAY listitem SEMI
    (52) expr6 -> ID LARRAY . expr RARRAY
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    RARRAY          shift and go to state 133
    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr                           shift and go to state 134
    expr2                          shift and go to state 47
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 105

    (57) expr6 -> ID LPAREN . listexpr RPAREN
    (2) listexpr -> .
    (3) listexpr -> . expr
    (4) listexpr -> . listexpr COMMA expr
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    RPAREN          reduce using rule 2 (listexpr -> .)
    COMMA           reduce using rule 2 (listexpr -> .)
    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr                           shift and go to state 136
    listexpr                       shift and go to state 135
    expr2                          shift and go to state 47
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 106

    (33) stmt -> ID listitem . SEMI
    (13) listitem -> listitem . COMMA item

    SEMI            shift and go to state 137
    COMMA           shift and go to state 126


state 107

    (40) stmt -> IF LPAREN . expr RPAREN stmt
    (41) stmt -> IF LPAREN . expr RPAREN stmt ELSE stmt
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr                           shift and go to state 138
    expr2                          shift and go to state 47
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 108

    (43) stmt -> expr SEMI .

    RBRACE          reduce using rule 43 (stmt -> expr SEMI .)
    SEMI            reduce using rule 43 (stmt -> expr SEMI .)
    ID              reduce using rule 43 (stmt -> expr SEMI .)
    RETURN          reduce using rule 43 (stmt -> expr SEMI .)
    IF              reduce using rule 43 (stmt -> expr SEMI .)
    WHILE           reduce using rule 43 (stmt -> expr SEMI .)
    FOR             reduce using rule 43 (stmt -> expr SEMI .)
    LBRACE          reduce using rule 43 (stmt -> expr SEMI .)
    NEW             reduce using rule 43 (stmt -> expr SEMI .)
    NUMBER          reduce using rule 43 (stmt -> expr SEMI .)
    LPAREN          reduce using rule 43 (stmt -> expr SEMI .)
    TRUE            reduce using rule 43 (stmt -> expr SEMI .)
    FALSE           reduce using rule 43 (stmt -> expr SEMI .)
    SENTENCE        reduce using rule 43 (stmt -> expr SEMI .)
    INT             reduce using rule 43 (stmt -> expr SEMI .)
    STRING          reduce using rule 43 (stmt -> expr SEMI .)
    VOID            reduce using rule 43 (stmt -> expr SEMI .)
    BOOLEAN         reduce using rule 43 (stmt -> expr SEMI .)
    MINUS           reduce using rule 43 (stmt -> expr SEMI .)
    NOT             reduce using rule 43 (stmt -> expr SEMI .)
    ELSE            reduce using rule 43 (stmt -> expr SEMI .)


state 109

    (63) expr5 -> NOT expr6 .
    (50) expr6 -> expr6 . DOT ID
    (51) expr6 -> expr6 . DOT ID LARRAY expr RARRAY
    (58) expr6 -> expr6 . DOT ID LPAREN listexpr RPAREN

    TIMES           reduce using rule 63 (expr5 -> NOT expr6 .)
    DIVIDE          reduce using rule 63 (expr5 -> NOT expr6 .)
    MOD             reduce using rule 63 (expr5 -> NOT expr6 .)
    PLUS            reduce using rule 63 (expr5 -> NOT expr6 .)
    MINUS           reduce using rule 63 (expr5 -> NOT expr6 .)
    AND             reduce using rule 63 (expr5 -> NOT expr6 .)
    LT              reduce using rule 63 (expr5 -> NOT expr6 .)
    LE              reduce using rule 63 (expr5 -> NOT expr6 .)
    GT              reduce using rule 63 (expr5 -> NOT expr6 .)
    GE              reduce using rule 63 (expr5 -> NOT expr6 .)
    EQ              reduce using rule 63 (expr5 -> NOT expr6 .)
    NE              reduce using rule 63 (expr5 -> NOT expr6 .)
    OR              reduce using rule 63 (expr5 -> NOT expr6 .)
    RPAREN          reduce using rule 63 (expr5 -> NOT expr6 .)
    COMMA           reduce using rule 63 (expr5 -> NOT expr6 .)
    SEMI            reduce using rule 63 (expr5 -> NOT expr6 .)
    RARRAY          reduce using rule 63 (expr5 -> NOT expr6 .)
    DOT             shift and go to state 93


state 110

    (83) expr -> expr1 OR . expr
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr                           shift and go to state 139
    expr2                          shift and go to state 47
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 111

    (22) field -> ID LARRAY RARRAY ID . SEMI

    SEMI            shift and go to state 140


state 112

    (23) field -> type ID LPAREN listarg . RPAREN block
    (16) listarg -> listarg . COMMA arg

    RPAREN          shift and go to state 141
    COMMA           shift and go to state 25


state 113

    (52) expr6 -> ID LARRAY . expr RARRAY
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr                           shift and go to state 134
    expr2                          shift and go to state 47
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 114

    (38) stmt -> RETURN expr SEMI .

    RBRACE          reduce using rule 38 (stmt -> RETURN expr SEMI .)
    SEMI            reduce using rule 38 (stmt -> RETURN expr SEMI .)
    ID              reduce using rule 38 (stmt -> RETURN expr SEMI .)
    RETURN          reduce using rule 38 (stmt -> RETURN expr SEMI .)
    IF              reduce using rule 38 (stmt -> RETURN expr SEMI .)
    WHILE           reduce using rule 38 (stmt -> RETURN expr SEMI .)
    FOR             reduce using rule 38 (stmt -> RETURN expr SEMI .)
    LBRACE          reduce using rule 38 (stmt -> RETURN expr SEMI .)
    NEW             reduce using rule 38 (stmt -> RETURN expr SEMI .)
    NUMBER          reduce using rule 38 (stmt -> RETURN expr SEMI .)
    LPAREN          reduce using rule 38 (stmt -> RETURN expr SEMI .)
    TRUE            reduce using rule 38 (stmt -> RETURN expr SEMI .)
    FALSE           reduce using rule 38 (stmt -> RETURN expr SEMI .)
    SENTENCE        reduce using rule 38 (stmt -> RETURN expr SEMI .)
    INT             reduce using rule 38 (stmt -> RETURN expr SEMI .)
    STRING          reduce using rule 38 (stmt -> RETURN expr SEMI .)
    VOID            reduce using rule 38 (stmt -> RETURN expr SEMI .)
    BOOLEAN         reduce using rule 38 (stmt -> RETURN expr SEMI .)
    MINUS           reduce using rule 38 (stmt -> RETURN expr SEMI .)
    NOT             reduce using rule 38 (stmt -> RETURN expr SEMI .)
    ELSE            reduce using rule 38 (stmt -> RETURN expr SEMI .)


state 115

    (42) stmt -> WHILE LPAREN expr . RPAREN stmt

    RPAREN          shift and go to state 142


state 116

    (46) expr6 -> NEW type_s LARRAY . expr RARRAY
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr2                          shift and go to state 47
    expr                           shift and go to state 143
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 117

    (47) expr6 -> NEW ID LARRAY . expr RARRAY
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr                           shift and go to state 144
    expr2                          shift and go to state 47
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 118

    (81) expr1 -> expr2 AND expr1 .

    OR              reduce using rule 81 (expr1 -> expr2 AND expr1 .)
    SEMI            reduce using rule 81 (expr1 -> expr2 AND expr1 .)
    RARRAY          reduce using rule 81 (expr1 -> expr2 AND expr1 .)
    RPAREN          reduce using rule 81 (expr1 -> expr2 AND expr1 .)
    COMMA           reduce using rule 81 (expr1 -> expr2 AND expr1 .)


state 119

    (79) expr2 -> expr2 relop expr3 .
    (71) expr3 -> expr3 . addop expr4
    (69) addop -> . PLUS
    (70) addop -> . MINUS

    AND             reduce using rule 79 (expr2 -> expr2 relop expr3 .)
    LT              reduce using rule 79 (expr2 -> expr2 relop expr3 .)
    LE              reduce using rule 79 (expr2 -> expr2 relop expr3 .)
    GT              reduce using rule 79 (expr2 -> expr2 relop expr3 .)
    GE              reduce using rule 79 (expr2 -> expr2 relop expr3 .)
    EQ              reduce using rule 79 (expr2 -> expr2 relop expr3 .)
    NE              reduce using rule 79 (expr2 -> expr2 relop expr3 .)
    OR              reduce using rule 79 (expr2 -> expr2 relop expr3 .)
    RARRAY          reduce using rule 79 (expr2 -> expr2 relop expr3 .)
    RPAREN          reduce using rule 79 (expr2 -> expr2 relop expr3 .)
    COMMA           reduce using rule 79 (expr2 -> expr2 relop expr3 .)
    SEMI            reduce using rule 79 (expr2 -> expr2 relop expr3 .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88

    addop                          shift and go to state 89

state 120

    (71) expr3 -> expr3 addop expr4 .
    (68) expr4 -> expr4 . mulop expr5
    (65) mulop -> . TIMES
    (66) mulop -> . DIVIDE
    (67) mulop -> . MOD

    PLUS            reduce using rule 71 (expr3 -> expr3 addop expr4 .)
    MINUS           reduce using rule 71 (expr3 -> expr3 addop expr4 .)
    AND             reduce using rule 71 (expr3 -> expr3 addop expr4 .)
    LT              reduce using rule 71 (expr3 -> expr3 addop expr4 .)
    LE              reduce using rule 71 (expr3 -> expr3 addop expr4 .)
    GT              reduce using rule 71 (expr3 -> expr3 addop expr4 .)
    GE              reduce using rule 71 (expr3 -> expr3 addop expr4 .)
    EQ              reduce using rule 71 (expr3 -> expr3 addop expr4 .)
    NE              reduce using rule 71 (expr3 -> expr3 addop expr4 .)
    OR              reduce using rule 71 (expr3 -> expr3 addop expr4 .)
    SEMI            reduce using rule 71 (expr3 -> expr3 addop expr4 .)
    RPAREN          reduce using rule 71 (expr3 -> expr3 addop expr4 .)
    RARRAY          reduce using rule 71 (expr3 -> expr3 addop expr4 .)
    COMMA           reduce using rule 71 (expr3 -> expr3 addop expr4 .)
    TIMES           shift and go to state 95
    DIVIDE          shift and go to state 94
    MOD             shift and go to state 97

    mulop                          shift and go to state 96

state 121

    (36) stmt -> expr6 PLUSPLUS SEMI .

    RBRACE          reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    SEMI            reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    ID              reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    RETURN          reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    IF              reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    WHILE           reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    FOR             reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    LBRACE          reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    NEW             reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    NUMBER          reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    LPAREN          reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    TRUE            reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    FALSE           reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    SENTENCE        reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    INT             reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    STRING          reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    VOID            reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    BOOLEAN         reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    MINUS           reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    NOT             reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)
    ELSE            reduce using rule 36 (stmt -> expr6 PLUSPLUS SEMI .)


state 122

    (35) stmt -> expr6 EQUALS expr . SEMI

    SEMI            shift and go to state 145


state 123

    (37) stmt -> expr6 MINUSMINUS SEMI .

    RBRACE          reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    SEMI            reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    ID              reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    RETURN          reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    IF              reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    WHILE           reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    FOR             reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    LBRACE          reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    NEW             reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    NUMBER          reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    LPAREN          reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    TRUE            reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    FALSE           reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    SENTENCE        reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    INT             reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    STRING          reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    VOID            reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    BOOLEAN         reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    MINUS           reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    NOT             reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)
    ELSE            reduce using rule 37 (stmt -> expr6 MINUSMINUS SEMI .)


state 124

    (50) expr6 -> expr6 DOT ID .
    (51) expr6 -> expr6 DOT ID . LARRAY expr RARRAY
    (58) expr6 -> expr6 DOT ID . LPAREN listexpr RPAREN

    DOT             reduce using rule 50 (expr6 -> expr6 DOT ID .)
    TIMES           reduce using rule 50 (expr6 -> expr6 DOT ID .)
    DIVIDE          reduce using rule 50 (expr6 -> expr6 DOT ID .)
    MOD             reduce using rule 50 (expr6 -> expr6 DOT ID .)
    PLUS            reduce using rule 50 (expr6 -> expr6 DOT ID .)
    MINUS           reduce using rule 50 (expr6 -> expr6 DOT ID .)
    AND             reduce using rule 50 (expr6 -> expr6 DOT ID .)
    LT              reduce using rule 50 (expr6 -> expr6 DOT ID .)
    LE              reduce using rule 50 (expr6 -> expr6 DOT ID .)
    GT              reduce using rule 50 (expr6 -> expr6 DOT ID .)
    GE              reduce using rule 50 (expr6 -> expr6 DOT ID .)
    EQ              reduce using rule 50 (expr6 -> expr6 DOT ID .)
    NE              reduce using rule 50 (expr6 -> expr6 DOT ID .)
    OR              reduce using rule 50 (expr6 -> expr6 DOT ID .)
    RPAREN          reduce using rule 50 (expr6 -> expr6 DOT ID .)
    COMMA           reduce using rule 50 (expr6 -> expr6 DOT ID .)
    SEMI            reduce using rule 50 (expr6 -> expr6 DOT ID .)
    RARRAY          reduce using rule 50 (expr6 -> expr6 DOT ID .)
    EQUALS          reduce using rule 50 (expr6 -> expr6 DOT ID .)
    PLUSPLUS        reduce using rule 50 (expr6 -> expr6 DOT ID .)
    MINUSMINUS      reduce using rule 50 (expr6 -> expr6 DOT ID .)
    LARRAY          shift and go to state 146
    LPAREN          shift and go to state 147


state 125

    (68) expr4 -> expr4 mulop expr5 .

    TIMES           reduce using rule 68 (expr4 -> expr4 mulop expr5 .)
    DIVIDE          reduce using rule 68 (expr4 -> expr4 mulop expr5 .)
    MOD             reduce using rule 68 (expr4 -> expr4 mulop expr5 .)
    PLUS            reduce using rule 68 (expr4 -> expr4 mulop expr5 .)
    MINUS           reduce using rule 68 (expr4 -> expr4 mulop expr5 .)
    AND             reduce using rule 68 (expr4 -> expr4 mulop expr5 .)
    LT              reduce using rule 68 (expr4 -> expr4 mulop expr5 .)
    LE              reduce using rule 68 (expr4 -> expr4 mulop expr5 .)
    GT              reduce using rule 68 (expr4 -> expr4 mulop expr5 .)
    GE              reduce using rule 68 (expr4 -> expr4 mulop expr5 .)
    EQ              reduce using rule 68 (expr4 -> expr4 mulop expr5 .)
    NE              reduce using rule 68 (expr4 -> expr4 mulop expr5 .)
    OR              reduce using rule 68 (expr4 -> expr4 mulop expr5 .)
    SEMI            reduce using rule 68 (expr4 -> expr4 mulop expr5 .)
    RPAREN          reduce using rule 68 (expr4 -> expr4 mulop expr5 .)
    RARRAY          reduce using rule 68 (expr4 -> expr4 mulop expr5 .)
    COMMA           reduce using rule 68 (expr4 -> expr4 mulop expr5 .)


state 126

    (13) listitem -> listitem COMMA . item
    (17) item -> . ID
    (18) item -> . ID EQUALS expr

    ID              shift and go to state 100

    item                           shift and go to state 148

state 127

    (32) stmt -> type listitem SEMI .

    RBRACE          reduce using rule 32 (stmt -> type listitem SEMI .)
    SEMI            reduce using rule 32 (stmt -> type listitem SEMI .)
    ID              reduce using rule 32 (stmt -> type listitem SEMI .)
    RETURN          reduce using rule 32 (stmt -> type listitem SEMI .)
    IF              reduce using rule 32 (stmt -> type listitem SEMI .)
    WHILE           reduce using rule 32 (stmt -> type listitem SEMI .)
    FOR             reduce using rule 32 (stmt -> type listitem SEMI .)
    LBRACE          reduce using rule 32 (stmt -> type listitem SEMI .)
    NEW             reduce using rule 32 (stmt -> type listitem SEMI .)
    NUMBER          reduce using rule 32 (stmt -> type listitem SEMI .)
    LPAREN          reduce using rule 32 (stmt -> type listitem SEMI .)
    TRUE            reduce using rule 32 (stmt -> type listitem SEMI .)
    FALSE           reduce using rule 32 (stmt -> type listitem SEMI .)
    SENTENCE        reduce using rule 32 (stmt -> type listitem SEMI .)
    INT             reduce using rule 32 (stmt -> type listitem SEMI .)
    STRING          reduce using rule 32 (stmt -> type listitem SEMI .)
    VOID            reduce using rule 32 (stmt -> type listitem SEMI .)
    BOOLEAN         reduce using rule 32 (stmt -> type listitem SEMI .)
    MINUS           reduce using rule 32 (stmt -> type listitem SEMI .)
    NOT             reduce using rule 32 (stmt -> type listitem SEMI .)
    ELSE            reduce using rule 32 (stmt -> type listitem SEMI .)


state 128

    (18) item -> ID EQUALS . expr
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr                           shift and go to state 149
    expr2                          shift and go to state 47
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 129

    (45) stmt -> FOR LPAREN ID . ID COL expr RPAREN stmt

    ID              shift and go to state 150


state 130

    (44) stmt -> FOR LPAREN type_s . ID COL expr RPAREN stmt

    ID              shift and go to state 151


state 131

    (54) expr6 -> LPAREN ID RPAREN . NULL

    NULL            shift and go to state 152


state 132

    (59) expr6 -> LPAREN expr RPAREN .

    DOT             reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    MOD             reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    AND             reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    LT              reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    LE              reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    GT              reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    GE              reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    EQ              reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    NE              reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    OR              reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    RARRAY          reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    PLUSPLUS        reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)
    MINUSMINUS      reduce using rule 59 (expr6 -> LPAREN expr RPAREN .)


state 133

    (34) stmt -> ID LARRAY RARRAY . listitem SEMI
    (12) listitem -> . item
    (13) listitem -> . listitem COMMA item
    (17) item -> . ID
    (18) item -> . ID EQUALS expr

    ID              shift and go to state 100

    item                           shift and go to state 98
    listitem                       shift and go to state 153

state 134

    (52) expr6 -> ID LARRAY expr . RARRAY

    RARRAY          shift and go to state 154


state 135

    (57) expr6 -> ID LPAREN listexpr . RPAREN
    (4) listexpr -> listexpr . COMMA expr

    RPAREN          shift and go to state 155
    COMMA           shift and go to state 156


state 136

    (3) listexpr -> expr .

    RPAREN          reduce using rule 3 (listexpr -> expr .)
    COMMA           reduce using rule 3 (listexpr -> expr .)


state 137

    (33) stmt -> ID listitem SEMI .

    RBRACE          reduce using rule 33 (stmt -> ID listitem SEMI .)
    SEMI            reduce using rule 33 (stmt -> ID listitem SEMI .)
    ID              reduce using rule 33 (stmt -> ID listitem SEMI .)
    RETURN          reduce using rule 33 (stmt -> ID listitem SEMI .)
    IF              reduce using rule 33 (stmt -> ID listitem SEMI .)
    WHILE           reduce using rule 33 (stmt -> ID listitem SEMI .)
    FOR             reduce using rule 33 (stmt -> ID listitem SEMI .)
    LBRACE          reduce using rule 33 (stmt -> ID listitem SEMI .)
    NEW             reduce using rule 33 (stmt -> ID listitem SEMI .)
    NUMBER          reduce using rule 33 (stmt -> ID listitem SEMI .)
    LPAREN          reduce using rule 33 (stmt -> ID listitem SEMI .)
    TRUE            reduce using rule 33 (stmt -> ID listitem SEMI .)
    FALSE           reduce using rule 33 (stmt -> ID listitem SEMI .)
    SENTENCE        reduce using rule 33 (stmt -> ID listitem SEMI .)
    INT             reduce using rule 33 (stmt -> ID listitem SEMI .)
    STRING          reduce using rule 33 (stmt -> ID listitem SEMI .)
    VOID            reduce using rule 33 (stmt -> ID listitem SEMI .)
    BOOLEAN         reduce using rule 33 (stmt -> ID listitem SEMI .)
    MINUS           reduce using rule 33 (stmt -> ID listitem SEMI .)
    NOT             reduce using rule 33 (stmt -> ID listitem SEMI .)
    ELSE            reduce using rule 33 (stmt -> ID listitem SEMI .)


state 138

    (40) stmt -> IF LPAREN expr . RPAREN stmt
    (41) stmt -> IF LPAREN expr . RPAREN stmt ELSE stmt

    RPAREN          shift and go to state 157


state 139

    (83) expr -> expr1 OR expr .

    RPAREN          reduce using rule 83 (expr -> expr1 OR expr .)
    COMMA           reduce using rule 83 (expr -> expr1 OR expr .)
    RARRAY          reduce using rule 83 (expr -> expr1 OR expr .)
    SEMI            reduce using rule 83 (expr -> expr1 OR expr .)


state 140

    (22) field -> ID LARRAY RARRAY ID SEMI .

    RBRACE          reduce using rule 22 (field -> ID LARRAY RARRAY ID SEMI .)
    ID              reduce using rule 22 (field -> ID LARRAY RARRAY ID SEMI .)
    INT             reduce using rule 22 (field -> ID LARRAY RARRAY ID SEMI .)
    STRING          reduce using rule 22 (field -> ID LARRAY RARRAY ID SEMI .)
    VOID            reduce using rule 22 (field -> ID LARRAY RARRAY ID SEMI .)
    BOOLEAN         reduce using rule 22 (field -> ID LARRAY RARRAY ID SEMI .)


state 141

    (23) field -> type ID LPAREN listarg RPAREN . block
    (28) block -> . LBRACE RBRACE
    (29) block -> . LBRACE liststmt RBRACE

    LBRACE          shift and go to state 31

    block                          shift and go to state 158

state 142

    (42) stmt -> WHILE LPAREN expr RPAREN . stmt
    (30) stmt -> . SEMI
    (31) stmt -> . block
    (32) stmt -> . type listitem SEMI
    (33) stmt -> . ID listitem SEMI
    (34) stmt -> . ID LARRAY RARRAY listitem SEMI
    (35) stmt -> . expr6 EQUALS expr SEMI
    (36) stmt -> . expr6 PLUSPLUS SEMI
    (37) stmt -> . expr6 MINUSMINUS SEMI
    (38) stmt -> . RETURN expr SEMI
    (39) stmt -> . RETURN SEMI
    (40) stmt -> . IF LPAREN expr RPAREN stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (42) stmt -> . WHILE LPAREN expr RPAREN stmt
    (43) stmt -> . expr SEMI
    (44) stmt -> . FOR LPAREN type_s ID COL expr RPAREN stmt
    (45) stmt -> . FOR LPAREN ID ID COL expr RPAREN stmt
    (28) block -> . LBRACE RBRACE
    (29) block -> . LBRACE liststmt RBRACE
    (89) type -> . type_s
    (90) type -> . type_s LARRAY RARRAY
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (85) type_s -> . INT
    (86) type_s -> . STRING
    (87) type_s -> . VOID
    (88) type_s -> . BOOLEAN
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6

    SEMI            shift and go to state 45
    ID              shift and go to state 58
    RETURN          shift and go to state 39
    IF              shift and go to state 59
    WHILE           shift and go to state 42
    FOR             shift and go to state 54
    LBRACE          shift and go to state 31
    NEW             shift and go to state 43
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55
    INT             shift and go to state 5
    STRING          shift and go to state 10
    VOID            shift and go to state 2
    BOOLEAN         shift and go to state 7
    MINUS           shift and go to state 46
    NOT             shift and go to state 62

    expr2                          shift and go to state 47
    expr                           shift and go to state 61
    stmt                           shift and go to state 159
    type_s                         shift and go to state 4
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 49
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51
    type                           shift and go to state 52
    block                          shift and go to state 64

state 143

    (46) expr6 -> NEW type_s LARRAY expr . RARRAY

    RARRAY          shift and go to state 160


state 144

    (47) expr6 -> NEW ID LARRAY expr . RARRAY

    RARRAY          shift and go to state 161


state 145

    (35) stmt -> expr6 EQUALS expr SEMI .

    RBRACE          reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    SEMI            reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    ID              reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    RETURN          reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    IF              reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    WHILE           reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    FOR             reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    LBRACE          reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    NEW             reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    NUMBER          reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    LPAREN          reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    TRUE            reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    FALSE           reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    SENTENCE        reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    INT             reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    STRING          reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    VOID            reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    BOOLEAN         reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    MINUS           reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    NOT             reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)
    ELSE            reduce using rule 35 (stmt -> expr6 EQUALS expr SEMI .)


state 146

    (51) expr6 -> expr6 DOT ID LARRAY . expr RARRAY
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr                           shift and go to state 162
    expr2                          shift and go to state 47
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 147

    (58) expr6 -> expr6 DOT ID LPAREN . listexpr RPAREN
    (2) listexpr -> .
    (3) listexpr -> . expr
    (4) listexpr -> . listexpr COMMA expr
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    RPAREN          reduce using rule 2 (listexpr -> .)
    COMMA           reduce using rule 2 (listexpr -> .)
    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr                           shift and go to state 136
    listexpr                       shift and go to state 163
    expr2                          shift and go to state 47
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 148

    (13) listitem -> listitem COMMA item .

    SEMI            reduce using rule 13 (listitem -> listitem COMMA item .)
    COMMA           reduce using rule 13 (listitem -> listitem COMMA item .)


state 149

    (18) item -> ID EQUALS expr .

    SEMI            reduce using rule 18 (item -> ID EQUALS expr .)
    COMMA           reduce using rule 18 (item -> ID EQUALS expr .)


state 150

    (45) stmt -> FOR LPAREN ID ID . COL expr RPAREN stmt

    COL             shift and go to state 164


state 151

    (44) stmt -> FOR LPAREN type_s ID . COL expr RPAREN stmt

    COL             shift and go to state 165


state 152

    (54) expr6 -> LPAREN ID RPAREN NULL .

    DOT             reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    TIMES           reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    DIVIDE          reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    MOD             reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    PLUS            reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    MINUS           reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    AND             reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    LT              reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    LE              reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    GT              reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    GE              reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    EQ              reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    NE              reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    OR              reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    RPAREN          reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    COMMA           reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    SEMI            reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    RARRAY          reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    EQUALS          reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    PLUSPLUS        reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)
    MINUSMINUS      reduce using rule 54 (expr6 -> LPAREN ID RPAREN NULL .)


state 153

    (34) stmt -> ID LARRAY RARRAY listitem . SEMI
    (13) listitem -> listitem . COMMA item

    SEMI            shift and go to state 166
    COMMA           shift and go to state 126


state 154

    (52) expr6 -> ID LARRAY expr RARRAY .

    DOT             reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    TIMES           reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    DIVIDE          reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    MOD             reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    PLUS            reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    MINUS           reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    AND             reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    LT              reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    LE              reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    GT              reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    GE              reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    EQ              reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    NE              reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    OR              reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    RPAREN          reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    COMMA           reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    SEMI            reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    RARRAY          reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    EQUALS          reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    PLUSPLUS        reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)
    MINUSMINUS      reduce using rule 52 (expr6 -> ID LARRAY expr RARRAY .)


state 155

    (57) expr6 -> ID LPAREN listexpr RPAREN .

    DOT             reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    TIMES           reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    DIVIDE          reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    MOD             reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    PLUS            reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    MINUS           reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    AND             reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    LT              reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    LE              reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    GT              reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    GE              reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    EQ              reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    NE              reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    OR              reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    RPAREN          reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    COMMA           reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    SEMI            reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    RARRAY          reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    EQUALS          reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    PLUSPLUS        reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)
    MINUSMINUS      reduce using rule 57 (expr6 -> ID LPAREN listexpr RPAREN .)


state 156

    (4) listexpr -> listexpr COMMA . expr
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr                           shift and go to state 167
    expr2                          shift and go to state 47
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 157

    (40) stmt -> IF LPAREN expr RPAREN . stmt
    (41) stmt -> IF LPAREN expr RPAREN . stmt ELSE stmt
    (30) stmt -> . SEMI
    (31) stmt -> . block
    (32) stmt -> . type listitem SEMI
    (33) stmt -> . ID listitem SEMI
    (34) stmt -> . ID LARRAY RARRAY listitem SEMI
    (35) stmt -> . expr6 EQUALS expr SEMI
    (36) stmt -> . expr6 PLUSPLUS SEMI
    (37) stmt -> . expr6 MINUSMINUS SEMI
    (38) stmt -> . RETURN expr SEMI
    (39) stmt -> . RETURN SEMI
    (40) stmt -> . IF LPAREN expr RPAREN stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (42) stmt -> . WHILE LPAREN expr RPAREN stmt
    (43) stmt -> . expr SEMI
    (44) stmt -> . FOR LPAREN type_s ID COL expr RPAREN stmt
    (45) stmt -> . FOR LPAREN ID ID COL expr RPAREN stmt
    (28) block -> . LBRACE RBRACE
    (29) block -> . LBRACE liststmt RBRACE
    (89) type -> . type_s
    (90) type -> . type_s LARRAY RARRAY
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (85) type_s -> . INT
    (86) type_s -> . STRING
    (87) type_s -> . VOID
    (88) type_s -> . BOOLEAN
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6

    SEMI            shift and go to state 45
    ID              shift and go to state 58
    RETURN          shift and go to state 39
    IF              shift and go to state 59
    WHILE           shift and go to state 42
    FOR             shift and go to state 54
    LBRACE          shift and go to state 31
    NEW             shift and go to state 43
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55
    INT             shift and go to state 5
    STRING          shift and go to state 10
    VOID            shift and go to state 2
    BOOLEAN         shift and go to state 7
    MINUS           shift and go to state 46
    NOT             shift and go to state 62

    expr2                          shift and go to state 47
    expr                           shift and go to state 61
    stmt                           shift and go to state 168
    type_s                         shift and go to state 4
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 49
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51
    type                           shift and go to state 52
    block                          shift and go to state 64

state 158

    (23) field -> type ID LPAREN listarg RPAREN block .

    RBRACE          reduce using rule 23 (field -> type ID LPAREN listarg RPAREN block .)
    ID              reduce using rule 23 (field -> type ID LPAREN listarg RPAREN block .)
    INT             reduce using rule 23 (field -> type ID LPAREN listarg RPAREN block .)
    STRING          reduce using rule 23 (field -> type ID LPAREN listarg RPAREN block .)
    VOID            reduce using rule 23 (field -> type ID LPAREN listarg RPAREN block .)
    BOOLEAN         reduce using rule 23 (field -> type ID LPAREN listarg RPAREN block .)


state 159

    (42) stmt -> WHILE LPAREN expr RPAREN stmt .

    RBRACE          reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    SEMI            reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ID              reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    IF              reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NEW             reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NUMBER          reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LPAREN          reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    TRUE            reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FALSE           reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    SENTENCE        reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    INT             reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    STRING          reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    VOID            reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    BOOLEAN         reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    MINUS           reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NOT             reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ELSE            reduce using rule 42 (stmt -> WHILE LPAREN expr RPAREN stmt .)


state 160

    (46) expr6 -> NEW type_s LARRAY expr RARRAY .

    DOT             reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    TIMES           reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    DIVIDE          reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    MOD             reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    PLUS            reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    MINUS           reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    AND             reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    LT              reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    LE              reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    GT              reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    GE              reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    EQ              reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    NE              reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    OR              reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    RPAREN          reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    COMMA           reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    SEMI            reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    RARRAY          reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    EQUALS          reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    PLUSPLUS        reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)
    MINUSMINUS      reduce using rule 46 (expr6 -> NEW type_s LARRAY expr RARRAY .)


state 161

    (47) expr6 -> NEW ID LARRAY expr RARRAY .

    DOT             reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    TIMES           reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    DIVIDE          reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    MOD             reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    PLUS            reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    MINUS           reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    AND             reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    LT              reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    LE              reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    GT              reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    GE              reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    EQ              reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    NE              reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    OR              reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    RPAREN          reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    COMMA           reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    SEMI            reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    RARRAY          reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    EQUALS          reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    PLUSPLUS        reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)
    MINUSMINUS      reduce using rule 47 (expr6 -> NEW ID LARRAY expr RARRAY .)


state 162

    (51) expr6 -> expr6 DOT ID LARRAY expr . RARRAY

    RARRAY          shift and go to state 169


state 163

    (58) expr6 -> expr6 DOT ID LPAREN listexpr . RPAREN
    (4) listexpr -> listexpr . COMMA expr

    RPAREN          shift and go to state 170
    COMMA           shift and go to state 156


state 164

    (45) stmt -> FOR LPAREN ID ID COL . expr RPAREN stmt
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr                           shift and go to state 171
    expr2                          shift and go to state 47
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 165

    (44) stmt -> FOR LPAREN type_s ID COL . expr RPAREN stmt
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE

    MINUS           shift and go to state 46
    NOT             shift and go to state 62
    NEW             shift and go to state 43
    ID              shift and go to state 71
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55

    expr2                          shift and go to state 47
    expr                           shift and go to state 172
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 70
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51

state 166

    (34) stmt -> ID LARRAY RARRAY listitem SEMI .

    RBRACE          reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    SEMI            reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    ID              reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    RETURN          reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    IF              reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    WHILE           reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    FOR             reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    LBRACE          reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    NEW             reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    NUMBER          reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    LPAREN          reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    TRUE            reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    FALSE           reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    SENTENCE        reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    INT             reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    STRING          reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    VOID            reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    BOOLEAN         reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    MINUS           reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    NOT             reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)
    ELSE            reduce using rule 34 (stmt -> ID LARRAY RARRAY listitem SEMI .)


state 167

    (4) listexpr -> listexpr COMMA expr .

    RPAREN          reduce using rule 4 (listexpr -> listexpr COMMA expr .)
    COMMA           reduce using rule 4 (listexpr -> listexpr COMMA expr .)


state 168

    (40) stmt -> IF LPAREN expr RPAREN stmt .
    (41) stmt -> IF LPAREN expr RPAREN stmt . ELSE stmt

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    SEMI            reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    ID              reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    IF              reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    NEW             reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    NUMBER          reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    LPAREN          reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    TRUE            reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    FALSE           reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    SENTENCE        reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    INT             reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    STRING          reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    VOID            reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    BOOLEAN         reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    MINUS           reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    NOT             reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .)
    ELSE            shift and go to state 173

  ! ELSE            [ reduce using rule 40 (stmt -> IF LPAREN expr RPAREN stmt .) ]


state 169

    (51) expr6 -> expr6 DOT ID LARRAY expr RARRAY .

    DOT             reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    TIMES           reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    DIVIDE          reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    MOD             reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    PLUS            reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    MINUS           reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    AND             reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    LT              reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    LE              reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    GT              reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    GE              reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    EQ              reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    NE              reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    OR              reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    RPAREN          reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    COMMA           reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    SEMI            reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    RARRAY          reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    EQUALS          reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    PLUSPLUS        reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)
    MINUSMINUS      reduce using rule 51 (expr6 -> expr6 DOT ID LARRAY expr RARRAY .)


state 170

    (58) expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .

    DOT             reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    TIMES           reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    DIVIDE          reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    MOD             reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    PLUS            reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    MINUS           reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    AND             reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    LT              reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    LE              reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    GT              reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    GE              reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    EQ              reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    NE              reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    OR              reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    RPAREN          reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    COMMA           reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    SEMI            reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    RARRAY          reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    EQUALS          reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    PLUSPLUS        reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)
    MINUSMINUS      reduce using rule 58 (expr6 -> expr6 DOT ID LPAREN listexpr RPAREN .)


state 171

    (45) stmt -> FOR LPAREN ID ID COL expr . RPAREN stmt

    RPAREN          shift and go to state 174


state 172

    (44) stmt -> FOR LPAREN type_s ID COL expr . RPAREN stmt

    RPAREN          shift and go to state 175


state 173

    (41) stmt -> IF LPAREN expr RPAREN stmt ELSE . stmt
    (30) stmt -> . SEMI
    (31) stmt -> . block
    (32) stmt -> . type listitem SEMI
    (33) stmt -> . ID listitem SEMI
    (34) stmt -> . ID LARRAY RARRAY listitem SEMI
    (35) stmt -> . expr6 EQUALS expr SEMI
    (36) stmt -> . expr6 PLUSPLUS SEMI
    (37) stmt -> . expr6 MINUSMINUS SEMI
    (38) stmt -> . RETURN expr SEMI
    (39) stmt -> . RETURN SEMI
    (40) stmt -> . IF LPAREN expr RPAREN stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (42) stmt -> . WHILE LPAREN expr RPAREN stmt
    (43) stmt -> . expr SEMI
    (44) stmt -> . FOR LPAREN type_s ID COL expr RPAREN stmt
    (45) stmt -> . FOR LPAREN ID ID COL expr RPAREN stmt
    (28) block -> . LBRACE RBRACE
    (29) block -> . LBRACE liststmt RBRACE
    (89) type -> . type_s
    (90) type -> . type_s LARRAY RARRAY
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (85) type_s -> . INT
    (86) type_s -> . STRING
    (87) type_s -> . VOID
    (88) type_s -> . BOOLEAN
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6

    SEMI            shift and go to state 45
    ID              shift and go to state 58
    RETURN          shift and go to state 39
    IF              shift and go to state 59
    WHILE           shift and go to state 42
    FOR             shift and go to state 54
    LBRACE          shift and go to state 31
    NEW             shift and go to state 43
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55
    INT             shift and go to state 5
    STRING          shift and go to state 10
    VOID            shift and go to state 2
    BOOLEAN         shift and go to state 7
    MINUS           shift and go to state 46
    NOT             shift and go to state 62

    expr2                          shift and go to state 47
    expr                           shift and go to state 61
    stmt                           shift and go to state 176
    type_s                         shift and go to state 4
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 49
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51
    type                           shift and go to state 52
    block                          shift and go to state 64

state 174

    (45) stmt -> FOR LPAREN ID ID COL expr RPAREN . stmt
    (30) stmt -> . SEMI
    (31) stmt -> . block
    (32) stmt -> . type listitem SEMI
    (33) stmt -> . ID listitem SEMI
    (34) stmt -> . ID LARRAY RARRAY listitem SEMI
    (35) stmt -> . expr6 EQUALS expr SEMI
    (36) stmt -> . expr6 PLUSPLUS SEMI
    (37) stmt -> . expr6 MINUSMINUS SEMI
    (38) stmt -> . RETURN expr SEMI
    (39) stmt -> . RETURN SEMI
    (40) stmt -> . IF LPAREN expr RPAREN stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (42) stmt -> . WHILE LPAREN expr RPAREN stmt
    (43) stmt -> . expr SEMI
    (44) stmt -> . FOR LPAREN type_s ID COL expr RPAREN stmt
    (45) stmt -> . FOR LPAREN ID ID COL expr RPAREN stmt
    (28) block -> . LBRACE RBRACE
    (29) block -> . LBRACE liststmt RBRACE
    (89) type -> . type_s
    (90) type -> . type_s LARRAY RARRAY
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (85) type_s -> . INT
    (86) type_s -> . STRING
    (87) type_s -> . VOID
    (88) type_s -> . BOOLEAN
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6

    SEMI            shift and go to state 45
    ID              shift and go to state 58
    RETURN          shift and go to state 39
    IF              shift and go to state 59
    WHILE           shift and go to state 42
    FOR             shift and go to state 54
    LBRACE          shift and go to state 31
    NEW             shift and go to state 43
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55
    INT             shift and go to state 5
    STRING          shift and go to state 10
    VOID            shift and go to state 2
    BOOLEAN         shift and go to state 7
    MINUS           shift and go to state 46
    NOT             shift and go to state 62

    expr2                          shift and go to state 47
    expr                           shift and go to state 61
    stmt                           shift and go to state 177
    type_s                         shift and go to state 4
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 49
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51
    type                           shift and go to state 52
    block                          shift and go to state 64

state 175

    (44) stmt -> FOR LPAREN type_s ID COL expr RPAREN . stmt
    (30) stmt -> . SEMI
    (31) stmt -> . block
    (32) stmt -> . type listitem SEMI
    (33) stmt -> . ID listitem SEMI
    (34) stmt -> . ID LARRAY RARRAY listitem SEMI
    (35) stmt -> . expr6 EQUALS expr SEMI
    (36) stmt -> . expr6 PLUSPLUS SEMI
    (37) stmt -> . expr6 MINUSMINUS SEMI
    (38) stmt -> . RETURN expr SEMI
    (39) stmt -> . RETURN SEMI
    (40) stmt -> . IF LPAREN expr RPAREN stmt
    (41) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (42) stmt -> . WHILE LPAREN expr RPAREN stmt
    (43) stmt -> . expr SEMI
    (44) stmt -> . FOR LPAREN type_s ID COL expr RPAREN stmt
    (45) stmt -> . FOR LPAREN ID ID COL expr RPAREN stmt
    (28) block -> . LBRACE RBRACE
    (29) block -> . LBRACE liststmt RBRACE
    (89) type -> . type_s
    (90) type -> . type_s LARRAY RARRAY
    (46) expr6 -> . NEW type_s LARRAY expr RARRAY
    (47) expr6 -> . NEW ID LARRAY expr RARRAY
    (48) expr6 -> . NEW ID
    (49) expr6 -> . ID
    (50) expr6 -> . expr6 DOT ID
    (51) expr6 -> . expr6 DOT ID LARRAY expr RARRAY
    (52) expr6 -> . ID LARRAY expr RARRAY
    (53) expr6 -> . NUMBER
    (54) expr6 -> . LPAREN ID RPAREN NULL
    (55) expr6 -> . TRUE
    (56) expr6 -> . FALSE
    (57) expr6 -> . ID LPAREN listexpr RPAREN
    (58) expr6 -> . expr6 DOT ID LPAREN listexpr RPAREN
    (59) expr6 -> . LPAREN expr RPAREN
    (60) expr6 -> . SENTENCE
    (83) expr -> . expr1 OR expr
    (84) expr -> . expr1
    (85) type_s -> . INT
    (86) type_s -> . STRING
    (87) type_s -> . VOID
    (88) type_s -> . BOOLEAN
    (81) expr1 -> . expr2 AND expr1
    (82) expr1 -> . expr2
    (79) expr2 -> . expr2 relop expr3
    (80) expr2 -> . expr3
    (71) expr3 -> . expr3 addop expr4
    (72) expr3 -> . expr4
    (64) expr4 -> . expr5
    (68) expr4 -> . expr4 mulop expr5
    (61) expr5 -> . MINUS expr6
    (62) expr5 -> . expr6
    (63) expr5 -> . NOT expr6

    SEMI            shift and go to state 45
    ID              shift and go to state 58
    RETURN          shift and go to state 39
    IF              shift and go to state 59
    WHILE           shift and go to state 42
    FOR             shift and go to state 54
    LBRACE          shift and go to state 31
    NEW             shift and go to state 43
    NUMBER          shift and go to state 41
    LPAREN          shift and go to state 57
    TRUE            shift and go to state 44
    FALSE           shift and go to state 60
    SENTENCE        shift and go to state 55
    INT             shift and go to state 5
    STRING          shift and go to state 10
    VOID            shift and go to state 2
    BOOLEAN         shift and go to state 7
    MINUS           shift and go to state 46
    NOT             shift and go to state 62

    expr2                          shift and go to state 47
    expr                           shift and go to state 61
    stmt                           shift and go to state 178
    type_s                         shift and go to state 4
    expr3                          shift and go to state 48
    expr1                          shift and go to state 63
    expr6                          shift and go to state 49
    expr4                          shift and go to state 50
    expr5                          shift and go to state 51
    type                           shift and go to state 52
    block                          shift and go to state 64

state 176

    (41) stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .

    RBRACE          reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    SEMI            reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ID              reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    RETURN          reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    IF              reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    WHILE           reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FOR             reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LBRACE          reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    NEW             reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    NUMBER          reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LPAREN          reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    TRUE            reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FALSE           reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    SENTENCE        reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    INT             reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    STRING          reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    VOID            reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    BOOLEAN         reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    MINUS           reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    NOT             reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ELSE            reduce using rule 41 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)


state 177

    (45) stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .

    RBRACE          reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    SEMI            reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    ID              reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    RETURN          reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    IF              reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    WHILE           reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    FOR             reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    LBRACE          reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    NEW             reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    NUMBER          reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    LPAREN          reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    TRUE            reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    FALSE           reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    SENTENCE        reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    INT             reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    STRING          reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    VOID            reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    BOOLEAN         reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    MINUS           reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    NOT             reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)
    ELSE            reduce using rule 45 (stmt -> FOR LPAREN ID ID COL expr RPAREN stmt .)


state 178

    (44) stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .

    RBRACE          reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    SEMI            reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    ID              reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    RETURN          reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    IF              reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    WHILE           reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    FOR             reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    LBRACE          reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    NEW             reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    NUMBER          reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    LPAREN          reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    TRUE            reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    FALSE           reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    SENTENCE        reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    INT             reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    STRING          reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    VOID            reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    BOOLEAN         reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    MINUS           reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    NOT             reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)
    ELSE            reduce using rule 44 (stmt -> FOR LPAREN type_s ID COL expr RPAREN stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for VOID in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 0 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 102 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 168 resolved as shift
