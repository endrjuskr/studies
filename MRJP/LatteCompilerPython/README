Compiler construction (MRJP 2013) lab project
Developed by Andrzej Skrodzki (292510)

Catalog structure:
src/ - project files
README - readme file
Makefile
lattetests/ - set of latte tests provided within project description extended with few new ones
lib/ply/ - PLY (Python Lex-Yacc). Python implementation of the common parsing tools lex and yacc. Developed by David M. Beazley (Dabeaz LLC). Found at https://github.com/dabeaz/ply.

How to install:
Simply run 'make' to create latc compiler. 'make clean' command cleans up directories to original state.

How to use:
Run 'calc [file]' where '[file]' is the path to file, which should be compiled.

How to test:
To run tests go to folder 'lattetests' and run 'runtests.sh [foldername]', 
where '[foldername]' is the folder with tests like 'good' or 'bad'.
Output will be placed in folder 'output' under folder, which you specified previously.

Main parts of project:
1. LatteExceptions - package containing all used exceptions. All exceptions have information about line and character where they occured.
2. LatteParsers - set of classes used to build AST.
3. Env.py - class to represent current environment.
4. LatteLex.py - lexer for Latte language.
5. LattePar.py - parser for Latte Language. Production written to satisfy PLY requirements.
6. LatteTypeChecker.py - type checker for Latte Language.
7. TokRules.py - set of used tokens.

Compiler assumption:
1. Booleans have only '==' and '!=' relation operators.
2. All return statements must have proper expression type.
3. Values of variables are not counted during return checking.
4. Used parser - LALR.

Extensions:
1. Arrays
2. Structs
3. Objects1


Note:
Right now, there are no extensions, so only tests from 'good' and 'bad' folders work.
