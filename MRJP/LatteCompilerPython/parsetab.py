# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = 'b\x14b\xdf\xe1WH8$W7-\\\xf9\xc4h'

_lr_action_items = {'DIVIDE': ([23, 25, 31, 32, 33, 36, 39, 41, 46, 51, 78, 83, 85, 89, 100, ],
                               [-34, -35, -41, 64, -43, -39, -33, -36, -33, -40, -42, 64, -47, -38, -37, ]), 'RETURN': (
    [18, 22, 27, 35, 37, 44, 45, 48, 49, 77, 79, 87, 90, 94, 96, 99, 102, 103, 105, 106, 107, ],
    [21, 21, -21, -19, -7, -22, -28, -20, -8, -32, -27, -23, -25, -26, 21, -24, 21, -31, -29, 21, -30, ]), 'VOID': (
    [0, 2, 4, 9, 11, 16, 18, 19, 22, 27, 35, 37, 44, 45, 48, 49, 77, 79, 87, 90, 94, 96, 99, 102, 103, 105, 106, 107, ],
    [3, -5, 3, -6, 3, 3, 3, -18, 3, -21, -19, -7, -22, -28, -20, -8, -32, -27, -23, -25, -26, 3, -24, 3, -31, -29, 3,
     -30, ]), 'NUMBER': (
    [18, 21, 22, 26, 27, 35, 37, 38, 43, 44, 45, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
     67,
     73, 74, 76, 77, 79, 87, 88, 90, 94, 96, 99, 101, 102, 103, 105, 106, 107, ],
    [23, 23, 23, 23, -21, -19, -7, 23, 23, -22, -28, -20, -8, 23, 23, -54, -53, 23, -55, -57, -52, -56, -48, -49, 23,
     23,
     -45, -44, 23, -46, 23, 23, 23, -32, -27, -23, 23, -25, -26, 23, -24, 23, 23, -31, -29, 23, -30, ]), 'WHILE': (
    [18, 22, 27, 35, 37, 44, 45, 48, 49, 77, 79, 87, 90, 94, 96, 99, 102, 103, 105, 106, 107, ],
    [24, 24, -21, -19, -7, -22, -28, -20, -8, -32, -27, -23, -25, -26, 24, -24, 24, -31, -29, 24, -30, ]), 'TRUE': (
    [18, 21, 22, 26, 27, 35, 37, 38, 43, 44, 45, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
     67,
     73, 74, 76, 77, 79, 87, 88, 90, 94, 96, 99, 101, 102, 103, 105, 106, 107, ],
    [25, 25, 25, 25, -21, -19, -7, 25, 25, -22, -28, -20, -8, 25, 25, -54, -53, 25, -55, -57, -52, -56, -48, -49, 25,
     25,
     -45, -44, 25, -46, 25, 25, 25, -32, -27, -23, 25, -25, -26, 25, -24, 25, 25, -31, -29, 25, -30, ]), 'MINUS': (
    [18, 21, 22, 23, 25, 27, 29, 31, 32, 33, 35, 36, 37, 38, 39, 41, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
     58,
     59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 76, 77, 78, 79, 82, 83, 85, 87, 88, 89, 90, 94, 96, 99, 100, 101, 102,
     103,
     105, 106, 107, ],
    [26, 26, 26, -34, -35, -21, 61, -41, -51, -43, -19, -39, -7, 26, -33, -36, -22, -28, -33, -20, -8, 26, -40, 26, -54,
     -53, 26, -55, -57, -52, -56, -48, -49, 26, 26, -45, -44, 26, -46, 26, 26, 26, -32, -42, -27, 61, -50, -47, -23, 26,
     -38, -25, -26, 26, -24, -37, 26, 26, -31, -29, 26, -30, ]), 'RBRACE': (
    [18, 22, 27, 35, 37, 44, 45, 48, 49, 77, 79, 87, 90, 94, 99, 103, 105, 107, ],
    [35, 48, -21, -19, -7, -22, -28, -20, -8, -32, -27, -23, -25, -26, -24, -31, -29, -30, ]), 'LE': (
    [23, 25, 28, 29, 31, 32, 33, 36, 39, 41, 46, 51, 78, 82, 83, 85, 89, 100, ],
    [-34, -35, 54, -59, -41, -51, -43, -39, -33, -36, -33, -40, -42, -58, -50, -47, -38, -37, ]), 'RPAREN': (
    [11, 12, 13, 17, 20, 23, 25, 28, 29, 30, 31, 32, 33, 36, 41, 46, 51, 71, 74, 78, 80, 81, 82, 83, 84, 85, 89, 92, 93,
     95,
     100, 104, ],
    [-12, 15, -13, -17, -14, -34, -35, -61, -59, -63, -41, -51, -43, -39, -36, -33, -40, 89, -2, -42, 96, -60, -58, -50,
     -62, -47, -38, 100, -3, 102, -37, -4, ]), 'SEMI': (
    [1, 3, 5, 7, 18, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 44, 45, 46, 47, 48, 49, 51,
     68,
     69, 70, 72, 75, 77, 78, 79, 81, 82, 83, 84, 85, 87, 89, 90, 91, 94, 96, 97, 98, 99, 100, 102, 103, 105, 106,
     107, ],
    [-65, -66, -64, -67, 27, 45, 27, -34, -35, -21, -61, -59, -63, -41, -51, -43, -9, -19, -39, -7, -33, -36, 77, -22,
     -28,
     -33, 79, -20, -8, -40, -10, 87, -15, 90, 94, -32, -42, -27, -60, -58, -50, -62, -47, -23, -38, -25, 99, -26, 27,
     -11,
     -16, -24, -37, 27, -31, -29, 27, -30, ]), 'NE': (
    [23, 25, 28, 29, 31, 32, 33, 36, 39, 41, 46, 51, 78, 82, 83, 85, 89, 100, ],
    [-34, -35, 57, -59, -41, -51, -43, -39, -33, -36, -33, -40, -42, -58, -50, -47, -38, -37, ]), 'LT': (
    [23, 25, 28, 29, 31, 32, 33, 36, 39, 41, 46, 51, 78, 82, 83, 85, 89, 100, ],
    [-34, -35, 58, -59, -41, -51, -43, -39, -33, -36, -33, -40, -42, -58, -50, -47, -38, -37, ]), 'COMMA': (
    [1, 3, 5, 7, 11, 12, 13, 17, 20, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 41, 46, 51, 68, 69, 70, 74, 78, 81, 82, 83,
     84,
     85, 89, 92, 93, 97, 98, 100, 104, ],
    [-65, -66, -64, -67, -12, 16, -13, -17, -14, -34, -35, -61, -59, -63, -41, -51, -43, -9, -39, -36, -33, -40, -10,
     86,
     -15, -2, -42, -60, -58, -50, -62, -47, -38, 101, -3, -11, -16, -37, -4, ]), 'PLUS': (
    [23, 25, 29, 31, 32, 33, 36, 39, 41, 46, 51, 78, 82, 83, 85, 89, 100, ],
    [-34, -35, 60, -41, -51, -43, -39, -33, -36, -33, -40, -42, 60, -50, -47, -38, -37, ]),
                    '$end': ([2, 4, 6, 9, 19, 35, 48, ], [-5, -1, 0, -6, -18, -19, -20, ]), 'GT': (
    [23, 25, 28, 29, 31, 32, 33, 36, 39, 41, 46, 51, 78, 82, 83, 85, 89, 100, ],
    [-34, -35, 53, -59, -41, -51, -43, -39, -33, -36, -33, -40, -42, -58, -50, -47, -38, -37, ]), 'STRING': (
    [0, 2, 4, 9, 11, 16, 18, 19, 22, 27, 35, 37, 44, 45, 48, 49, 77, 79, 87, 90, 94, 96, 99, 102, 103, 105, 106, 107, ],
    [1, -5, 1, -6, 1, 1, 1, -18, 1, -21, -19, -7, -22, -28, -20, -8, -32, -27, -23, -25, -26, 1, -24, 1, -31, -29, 1,
     -30, ]), 'SENTENCE': (
    [18, 21, 22, 26, 27, 35, 37, 38, 43, 44, 45, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
     67,
     73, 74, 76, 77, 79, 87, 88, 90, 94, 96, 99, 101, 102, 103, 105, 106, 107, ],
    [36, 36, 36, 36, -21, -19, -7, 36, 36, -22, -28, -20, -8, 36, 36, -54, -53, 36, -55, -57, -52, -56, -48, -49, 36,
     36,
     -45, -44, 36, -46, 36, 36, 36, -32, -27, -23, 36, -25, -26, 36, -24, 36, 36, -31, -29, 36, -30, ]),
                    'PLUSPLUS': ([39, ], [72, ]), 'EQUALS': ([39, 70, ], [73, 88, ]), 'TIMES': (
    [23, 25, 31, 32, 33, 36, 39, 41, 46, 51, 78, 83, 85, 89, 100, ],
    [-34, -35, -41, 65, -43, -39, -33, -36, -33, -40, -42, 65, -47, -38, -37, ]), 'GE': (
    [23, 25, 28, 29, 31, 32, 33, 36, 39, 41, 46, 51, 78, 82, 83, 85, 89, 100, ],
    [-34, -35, 56, -59, -41, -51, -43, -39, -33, -36, -33, -40, -42, -58, -50, -47, -38, -37, ]), 'LPAREN': (
    [10, 18, 21, 22, 24, 26, 27, 35, 37, 38, 39, 40, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
     62,
     63, 64, 65, 66, 67, 73, 74, 76, 77, 79, 87, 88, 90, 94, 96, 99, 101, 102, 103, 105, 106, 107, ],
    [11, 38, 38, 38, 50, 38, -21, -19, -7, 38, 74, 76, 38, -22, -28, 74, -20, -8, 38, 38, -54, -53, 38, -55, -57, -52,
     -56,
     -48, -49, 38, 38, -45, -44, 38, -46, 38, 38, 38, -32, -27, -23, 38, -25, -26, 38, -24, 38, 38, -31, -29, 38,
     -30, ]),
                    'MINUSMINUS': ([39, ], [75, ]), 'ELSE': (
    [27, 35, 44, 45, 48, 77, 79, 87, 90, 94, 99, 103, 105, 107, ],
    [-21, -19, -22, -28, -20, -32, -27, -23, -25, -26, -24, -31, 106, -30, ]), 'EQ': (
    [23, 25, 28, 29, 31, 32, 33, 36, 39, 41, 46, 51, 78, 82, 83, 85, 89, 100, ],
    [-34, -35, 59, -59, -41, -51, -43, -39, -33, -36, -33, -40, -42, -58, -50, -47, -38, -37, ]), 'ID': (
    [1, 3, 5, 7, 8, 14, 18, 21, 22, 26, 27, 34, 35, 37, 38, 43, 44, 45, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60,
     61,
     62, 63, 64, 65, 66, 67, 73, 74, 76, 77, 79, 86, 87, 88, 90, 94, 96, 99, 101, 102, 103, 105, 106, 107, ],
    [-65, -66, -64, -67, 10, 17, 39, 46, 39, 46, -21, 70, -19, -7, 46, 46, -22, -28, -20, -8, 46, 46, -54, -53, 46, -55,
     -57, -52, -56, -48, -49, 46, 46, -45, -44, 46, -46, 46, 46, 46, -32, -27, 70, -23, 46, -25, -26, 39, -24, 46, 39,
     -31,
     -29, 39, -30, ]),
                    'IF': ([18, 22, 27, 35, 37, 44, 45, 48, 49, 77, 79, 87, 90, 94, 96, 99, 102, 103, 105, 106, 107, ],
                           [40, 40, -21, -19, -7, -22, -28, -20, -8, -32, -27, -23, -25, -26, 40, -24, 40, -31, -29, 40,
                            -30, ]),
                    'AND': ([23, 25, 28, 29, 31, 32, 33, 36, 39, 41, 46, 51, 78, 82, 83, 85, 89, 100, ],
                            [-34, -35, 52, -59, -41, -51, -43, -39, -33, -36, -33, -40, -42, -58, -50,
                             -47, -38, -37, ]), 'LBRACE': (
    [15, 18, 22, 27, 35, 37, 44, 45, 48, 49, 77, 79, 87, 90, 94, 96, 99, 102, 103, 105, 106, 107, ],
    [18, 18, 18, -21, -19, -7, -22, -28, -20, -8, -32, -27, -23, -25, -26, 18, -24, 18, -31, -29, 18, -30, ]),
                    'FALSE': (
                        [18, 21, 22, 26, 27, 35, 37, 38, 43, 44, 45, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
                         62, 63, 64, 65, 66, 67,
                         73, 74, 76, 77, 79, 87, 88, 90, 94, 96, 99, 101, 102, 103, 105, 106, 107, ],
                        [41, 41, 41, 41, -21, -19, -7, 41, 41, -22, -28, -20, -8, 41, 41, -54, -53, 41, -55, -57, -52,
                         -56, -48, -49, 41, 41,
                         -45, -44, 41, -46, 41, 41, 41, -32, -27, -23, 41, -25, -26, 41, -24, 41, 41, -31, -29, 41,
                         -30, ]), 'INT': (
    [0, 2, 4, 9, 11, 16, 18, 19, 22, 27, 35, 37, 44, 45, 48, 49, 77, 79, 87, 90, 94, 96, 99, 102, 103, 105, 106, 107, ],
    [5, -5, 5, -6, 5, 5, 5, -18, 5, -21, -19, -7, -22, -28, -20, -8, -32, -27, -23, -25, -26, 5, -24, 5, -31, -29, 5,
     -30, ]), 'BOOLEAN': (
    [0, 2, 4, 9, 11, 16, 18, 19, 22, 27, 35, 37, 44, 45, 48, 49, 77, 79, 87, 90, 94, 96, 99, 102, 103, 105, 106, 107, ],
    [7, -5, 7, -6, 7, 7, 7, -18, 7, -21, -19, -7, -22, -28, -20, -8, -32, -27, -23, -25, -26, 7, -24, 7, -31, -29, 7,
     -30, ]), 'NOT': (
    [18, 21, 22, 27, 35, 37, 38, 44, 45, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73,
     74,
     76, 77, 79, 87, 88, 90, 94, 96, 99, 101, 102, 103, 105, 106, 107, ],
    [43, 43, 43, -21, -19, -7, 43, -22, -28, -20, -8, 43, 43, -54, -53, 43, -55, -57, -52, -56, -48, -49, 43, 43, -45,
     -44,
     43, -46, 43, 43, 43, -32, -27, -23, 43, -25, -26, 43, -24, 43, 43, -31, -29, 43, -30, ]), 'OR': (
    [23, 25, 28, 29, 30, 31, 32, 33, 36, 39, 41, 46, 51, 78, 81, 82, 83, 85, 89, 100, ],
    [-34, -35, -61, -59, 63, -41, -51, -43, -39, -33, -36, -33, -40, -42, -60, -58, -50, -47, -38, -37, ]), 'MOD': (
    [23, 25, 31, 32, 33, 36, 39, 41, 46, 51, 78, 83, 85, 89, 100, ],
    [-34, -35, -41, 67, -43, -39, -33, -36, -33, -40, -42, 67, -47, -38, -37, ]), }

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:  _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'liststmt': ([18, ], [22, ]), 'listarg': ([11, ], [12, ]), 'listexpr': ([74, ], [92, ]),
                  'arg': ([11, 16, ], [13, 20, ]), 'expr2': (
    [18, 21, 22, 38, 50, 52, 63, 73, 74, 76, 88, 96, 101, 102, 106, ],
    [28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, ]), 'expr3': (
    [18, 21, 22, 38, 50, 52, 55, 63, 73, 74, 76, 88, 96, 101, 102, 106, ],
    [29, 29, 29, 29, 29, 29, 82, 29, 29, 29, 29, 29, 29, 29, 29, 29, ]), 'program': ([0, ], [6, ]), 'expr6': (
    [18, 21, 22, 26, 38, 43, 50, 52, 55, 62, 63, 66, 73, 74, 76, 88, 96, 101, 102, 106, ],
    [31, 31, 31, 51, 31, 78, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, ]), 'listitem': ([34, ], [69, ]),
                  'expr4': ([18, 21, 22, 38, 50, 52, 55, 62, 63, 73, 74, 76, 88, 96, 101, 102, 106, ],
                            [32, 32, 32, 32, 32, 32, 32, 83, 32, 32, 32, 32, 32, 32, 32, 32, 32, ]), 'expr5': (
    [18, 21, 22, 38, 50, 52, 55, 62, 63, 66, 73, 74, 76, 88, 96, 101, 102, 106, ],
    [33, 33, 33, 33, 33, 33, 33, 33, 33, 85, 33, 33, 33, 33, 33, 33, 33, 33, ]),
                  'type': ([0, 4, 11, 16, 18, 22, 96, 102, 106, ], [8, 8, 14, 14, 34, 34, 34, 34, 34, ]),
                  'addop': ([29, 82, ], [62, 62, ]), 'topdef': ([0, 4, ], [2, 9, ]), 'listtopdef': ([0, ], [4, ]),
                  'stmt': ([18, 22, 96, 102, 106, ], [37, 49, 103, 105, 107, ]), 'relop': ([28, ], [55, ]), 'expr': (
    [18, 21, 22, 38, 50, 63, 73, 74, 76, 88, 96, 101, 102, 106, ],
    [42, 47, 42, 71, 80, 84, 91, 93, 95, 98, 42, 104, 42, 42, ]), 'item': ([34, 86, ], [68, 97, ]),
                  'mulop': ([32, 83, ], [66, 66, ]), 'expr1': (
    [18, 21, 22, 38, 50, 52, 63, 73, 74, 76, 88, 96, 101, 102, 106, ],
    [30, 30, 30, 30, 30, 81, 30, 30, 30, 30, 30, 30, 30, 30, 30, ]),
                  'block': ([15, 18, 22, 96, 102, 106, ], [19, 44, 44, 44, 44, 44, ]), }

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto: _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> program", "S'", 1, None, None, None),
    ('program -> listtopdef', 'program', 1, 'p_program', 'lattepar.py', 23),
    ('listexpr -> <empty>', 'listexpr', 0, 'p_list_expr', 'lattepar.py', 28),
    ('listexpr -> expr', 'listexpr', 1, 'p_list_expr', 'lattepar.py', 29),
    ('listexpr -> listexpr COMMA expr', 'listexpr', 3, 'p_list_expr', 'lattepar.py', 30),
    ('listtopdef -> topdef', 'listtopdef', 1, 'p_list_topdef', 'lattepar.py', 42),
    ('listtopdef -> listtopdef topdef', 'listtopdef', 2, 'p_list_topdef', 'lattepar.py', 43),
    ('liststmt -> stmt', 'liststmt', 1, 'p_list_stmt', 'lattepar.py', 53),
    ('liststmt -> liststmt stmt', 'liststmt', 2, 'p_list_stmt', 'lattepar.py', 54),
    ('listitem -> <empty>', 'listitem', 0, 'p_list_item', 'lattepar.py', 66),
    ('listitem -> item', 'listitem', 1, 'p_list_item', 'lattepar.py', 67),
    ('listitem -> listitem COMMA item', 'listitem', 3, 'p_list_item', 'lattepar.py', 68),
    ('listarg -> <empty>', 'listarg', 0, 'p_list_arg', 'lattepar.py', 80),
    ('listarg -> arg', 'listarg', 1, 'p_list_arg', 'lattepar.py', 81),
    ('listarg -> listarg COMMA arg', 'listarg', 3, 'p_list_arg', 'lattepar.py', 82),
    ('item -> ID', 'item', 1, 'p_item_noinit', 'lattepar.py', 94),
    ('item -> ID EQUALS expr', 'item', 3, 'p_item_init', 'lattepar.py', 99),
    ('arg -> type ID', 'arg', 2, 'p_arg', 'lattepar.py', 104),
    ('topdef -> type ID LPAREN listarg RPAREN block', 'topdef', 6, 'p_fndef', 'lattepar.py', 109),
    ('block -> LBRACE RBRACE', 'block', 2, 'p_block', 'lattepar.py', 113),
    ('block -> LBRACE liststmt RBRACE', 'block', 3, 'p_block', 'lattepar.py', 114),
    ('stmt -> SEMI', 'stmt', 1, 'p_statement_empty', 'lattepar.py', 122),
    ('stmt -> block', 'stmt', 1, 'p_statement_block', 'lattepar.py', 127),
    ('stmt -> type listitem SEMI', 'stmt', 3, 'p_statement_decl', 'lattepar.py', 132),
    ('stmt -> ID EQUALS expr SEMI', 'stmt', 4, 'p_statement_ass', 'lattepar.py', 137),
    ('stmt -> ID PLUSPLUS SEMI', 'stmt', 3, 'p_statement_incr', 'lattepar.py', 142),
    ('stmt -> ID MINUSMINUS SEMI', 'stmt', 3, 'p_statement_decr', 'lattepar.py', 147),
    ('stmt -> RETURN expr SEMI', 'stmt', 3, 'p_statement_ret', 'lattepar.py', 152),
    ('stmt -> RETURN SEMI', 'stmt', 2, 'p_statement_vret', 'lattepar.py', 157),
    ('stmt -> IF LPAREN expr RPAREN stmt', 'stmt', 5, 'p_statement_cond', 'lattepar.py', 162),
    ('stmt -> IF LPAREN expr RPAREN stmt ELSE stmt', 'stmt', 7, 'p_statement_condelse', 'lattepar.py', 167),
    ('stmt -> WHILE LPAREN expr RPAREN stmt', 'stmt', 5, 'p_statement_while', 'lattepar.py', 172),
    ('stmt -> expr SEMI', 'stmt', 2, 'p_statement_sexp', 'lattepar.py', 177),
    ('expr6 -> ID', 'expr6', 1, 'p_expression_var', 'lattepar.py', 182),
    ('expr6 -> NUMBER', 'expr6', 1, 'p_expression_int', 'lattepar.py', 187),
    ('expr6 -> TRUE', 'expr6', 1, 'p_expression_boolean', 'lattepar.py', 192),
    ('expr6 -> FALSE', 'expr6', 1, 'p_expression_boolean', 'lattepar.py', 193),
    ('expr6 -> ID LPAREN listexpr RPAREN', 'expr6', 4, 'p_expression_app', 'lattepar.py', 198),
    ('expr6 -> LPAREN expr RPAREN', 'expr6', 3, 'p_expression_group', 'lattepar.py', 202),
    ('expr6 -> SENTENCE', 'expr6', 1, 'p_expression_string', 'lattepar.py', 206),
    ('expr5 -> MINUS expr6', 'expr5', 2, 'p_expression_neg', 'lattepar.py', 211),
    ('expr5 -> expr6', 'expr5', 1, 'p_expression_not_1', 'lattepar.py', 216),
    ('expr5 -> NOT expr6', 'expr5', 2, 'p_expression_not_2', 'lattepar.py', 221),
    ('expr4 -> expr5', 'expr4', 1, 'p_expression_mul_1', 'lattepar.py', 226),
    ('mulop -> TIMES', 'mulop', 1, 'p_mulop', 'lattepar.py', 230),
    ('mulop -> DIVIDE', 'mulop', 1, 'p_mulop', 'lattepar.py', 231),
    ('mulop -> MOD', 'mulop', 1, 'p_mulop', 'lattepar.py', 232),
    ('expr4 -> expr4 mulop expr5', 'expr4', 3, 'p_expression_mul_2', 'lattepar.py', 236),
    ('addop -> PLUS', 'addop', 1, 'p_addop', 'lattepar.py', 240),
    ('addop -> MINUS', 'addop', 1, 'p_addop', 'lattepar.py', 241),
    ('expr3 -> expr3 addop expr4', 'expr3', 3, 'p_expression_add_1', 'lattepar.py', 245),
    ('expr3 -> expr4', 'expr3', 1, 'p_expression_add_3', 'lattepar.py', 250),
    ('relop -> LT', 'relop', 1, 'p_relop', 'lattepar.py', 254),
    ('relop -> LE', 'relop', 1, 'p_relop', 'lattepar.py', 255),
    ('relop -> GT', 'relop', 1, 'p_relop', 'lattepar.py', 256),
    ('relop -> GE', 'relop', 1, 'p_relop', 'lattepar.py', 257),
    ('relop -> EQ', 'relop', 1, 'p_relop', 'lattepar.py', 258),
    ('relop -> NE', 'relop', 1, 'p_relop', 'lattepar.py', 259),
    ('expr2 -> expr2 relop expr3', 'expr2', 3, 'p_expression_rel_1', 'lattepar.py', 263),
    ('expr2 -> expr3', 'expr2', 1, 'p_expression_rel_2', 'lattepar.py', 268),
    ('expr1 -> expr2 AND expr1', 'expr1', 3, 'p_expression_and_1', 'lattepar.py', 273),
    ('expr1 -> expr2', 'expr1', 1, 'p_expression_and_2', 'lattepar.py', 278),
    ('expr -> expr1 OR expr', 'expr', 3, 'p_expression_or_1', 'lattepar.py', 283),
    ('expr -> expr1', 'expr', 1, 'p_expression_or_2', 'lattepar.py', 288),
    ('type -> INT', 'type', 1, 'p_type', 'lattepar.py', 292),
    ('type -> STRING', 'type', 1, 'p_type', 'lattepar.py', 293),
    ('type -> VOID', 'type', 1, 'p_type', 'lattepar.py', 294),
    ('type -> BOOLEAN', 'type', 1, 'p_type', 'lattepar.py', 295),
]
